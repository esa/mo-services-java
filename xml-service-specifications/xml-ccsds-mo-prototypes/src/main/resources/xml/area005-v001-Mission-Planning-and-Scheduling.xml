<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright European Space Agency, 2025

  Generated from 529x1r1_RID_closeout_v3_draft_clean 28/03/2025
-->
<mal:specification
  xmlns:mal = "http://www.ccsds.org/schema/ServiceSchema-v003"
  xmlns:svg = "http://www.w3.org/2000/svg"
  xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" comment="">
  <mal:area name="MPS" number="5" version="1" comment="Mission Operations Mission Planning and Scheduling Services">

    <mal:service name="PlanningRequest" number="1" comment="The Planning Request Service, introduced in 2.5.2, is provided by a planning function and enables its consumers to manage the submission of planning requests and to receive feedback on their status.  It comprises the operations defined below, of which only those in capability set 1 are mandatory.
In the context of a hierarchical or federated planning system, the Planning Request Service submitRequest operation can be used to submit a Plan (4.5.6) to a planning function, either embedding the Plan in the request itself or passing it by reference.  If passed by reference, the Plan can be retrieved using the Plan Distribution Service (3.6).  Patch plans are not permitted in the context of a planning request.">

      <mal:documentation name="High-level Requirements" order="1">
        3.5.4.1 The following set of mission planning configuration data shall be available to both provider and consumers in any deployment of the planning request service:
        a) Planning Request Definitions (as RequestDefinition objects [4.5.5.1]);
        b) Planning Activity Definitions (as ActivityDefinition objects [4.5.2.1]);
        c) Planning Event Definitions (as EventDefinition objects [4.5.3.1]);
        d) Planning Resource Definitions (as Resource objects [4.5.4.2]) [Optional];
      </mal:documentation>
      <mal:documentation name="Functional Requirements" order="2">
        3.5.5.1 In response to a submitRequest operation, the service provider shall create a corresponding RequestInstance object, set its creationTime and return its identity (key and version) to the consumer.
        3.5.5.2 In response to an updateRequest operation, if supported, the service provider shall create a new version of the referenced RequestInstance object, set its creationTime and return its identity (key and version) to the consumer.
        3.5.5.3 The service provider shall only consider the latest version of a RequestInstance in the generation of future Plans, following a successful updateRequest operation.
        3.5.5.4 In response to a cancelRequest operation, if supported, the service provider shall set the requestStatus of the referenced RequestInstance object to ‘CANCELLED’ and stops it being considered in the generation of future Plans.
        3.5.5.5 In response to internal planning and feedback from external plan execution processes, the service provider shall model the status of RequestInstance objects in accordance with the planning request state model (4.5.5.2).
        NOTE	–	Following a successful updateRequest operation, it is implementation dependent what the status of the previous version of the RequestInstance is set to.  Previous versions may already have been incorporated into Plans.
        3.5.5.6 If a service consumer generates a planning request based on an existing planning request definition, then the PlanningRequestDetails submitted shall:
        a) Reference the source RequestDefinition (key and version) in the definition field;
        b) Contain a matching set of arguments (name and type) to the RequestDefinition in the arguments field;
        c) Have a matching value to the RequestDefinition in the standingOrder field.
        NOTE	–	While typically the PlanningRequestDetails will also have matching content to the RequestDefinition in the activities and constraints fields it is allowed to add and remove individual activities and constraints.
        3.5.5.7 In the context of a planning request that contains or references an existing Plan, the Plan shall be a full plan, patch plans are not permitted.
        3.5.5.8 Following successful inclusion of a planning request in a generated Plan, the service provider shall update the outputPlanRefs field of the RequestInstance with the identity of the Plan (key and version).
        NOTE	–	The consumer may then use the reference to the output Plan to retrieve the Plan or its status using the PlanDistributionService.  Where the planning request has been incorporated into multiple alternate plans, these will be listed in the outputPlanRefs field.
      </mal:documentation>

      <mal:capabilitySet number="1" comment="">

        <mal:requestIP name="submitRequest" number="1" comment="The submitRequest operation sends a planning request to the provider, which then creates a corresponding RequestInstance object and returns its identity to the consumer.">
          <mal:messages>
            <mal:request>
              <mal:field name="requestDetails" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="PlanningRequestDetails"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="requestResponse" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="PlanningRequestResponse"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="An optional data structure used in the message is not supported by the service provider.">
              <mal:type name="UNSUPPORTED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of MAL::Strings giving a dot-separated nested index for the unsupported field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.">
                <mal:type area="MAL" name="String" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

        <mal:requestIP name="getRequestSummaries" number="2" comment="The getRequestSummaries operation allows consumers to obtain a filtered list of currently available RequestInstances.  The request uses the RequestFilter structure to select the set of planning requests of interest, using the following keys:
Domain of the RequestInstance;
Instance ID (key and version) of the RequestInstance;
Creation date and time of the RequestInstance version (as a time range);
Definition ID (key and version) of the RequestInstance (the RequestDefinition from which it was created);
User ID of the PlanningUser who initiated the RequestInstance;
User Reference supplied by the User when submitting the RequestInstance.
The response returns a list of RequestSummaryStatus structures containing the identity (key and version), descriptive header fields, and status of the RequestInstances that match the filter.">
          <mal:messages>
            <mal:request>
              <mal:field name="requestFilter" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="RequestFilter"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="requestSummaries" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="RequestSummaryStatus"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

        <mal:progressIP name="getRequestStatus" number="3" comment="The getRequestStatus operation is used to obtain the current status of one or more known RequestInstances.  The operation uses the Progress interaction pattern, to allow the response to be spread across multiple messages.">
          <mal:messages>
            <mal:progress>
              <mal:field name="requestRefs" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="RequestInstance"/>
              </mal:field>
            </mal:progress>
            <mal:acknowledgement>
            </mal:acknowledgement>
            <mal:update>
              <mal:field name="requestStatuses" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="RequestStatusUpdate"/>
              </mal:field>
            </mal:update>
            <mal:response>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:progressIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="2" comment="">

        <mal:submitIP name="cancelRequest" number="4" comment="The cancelRequest operation is used by a consumer to cancel a previously submitted planning request.  The service provider acknowledges the cancellation of the RequestInstance or returns an error.">
          <mal:messages>
            <mal:submit>
              <mal:field name="requestRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="RequestInstance"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The cancelRequest operation failed to cancel the referenced RequestInstance.">
              <mal:type name="CANCEL_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="3" comment="">

        <mal:requestIP name="updateRequest" number="5" comment="The updateRequest operation may be used to modify the PlanningRequestDetails associated with a previously submitted planning request.  This results in the creation of a new version of the RequestInstance (with the same key) by the service provider, which returns the identity (key and version) of the new version to the consumer.">
          <mal:messages>
            <mal:request>
              <mal:field name="requestRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="RequestInstance"/>
              </mal:field>
              <mal:field name="requestDetails" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="PlanningRequestDetails"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="requestResponse" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="PlanningRequestResponse"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="An optional data structure used in the message is not supported by the service provider.">
              <mal:type name="UNSUPPORTED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of MAL::Strings giving a dot-separated nested index for the unsupported field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.">
                <mal:type area="MAL" name="String" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The update operation (to Request, PlanStatus, Activity, Event or Resource) failed to update the referenced object.">
              <mal:type name="UPDATE_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="4" comment="">

        <mal:pubsubIP name="monitorRequestStatus" number="6" comment="The monitorRequestStatus operation is used to subscribe to status updates for a filtered set of planning RequestInstances.  The operation uses the Publish-Subscribe interaction pattern, with the body of the notification message comprising a RequestStatusUpdate for a subscribed RequestInstance.">
          <mal:messages>
            <mal:subscriptionKeys>
              <mal:field name="instanceID" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="definitionID" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="userID" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="userReference" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="status" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="UShort"/>
              </mal:field>
              <mal:field name="outputPlanID" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
            </mal:subscriptionKeys>
            <mal:publishNotify>
              <mal:field name="requestStatusUpdate" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="RequestStatusUpdate"/>
              </mal:field>
            </mal:publishNotify>
          </mal:messages>
        </mal:pubsubIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="5" comment="">

        <mal:progressIP name="getRequest" number="7" comment="The getRequest operation is used to obtain the full content of one or more known RequestInstances.  The operation uses the Progress interaction pattern, to allow the response to be spread across multiple messages.">
          <mal:messages>
            <mal:progress>
              <mal:field name="requestRefs" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="RequestInstance"/>
              </mal:field>
            </mal:progress>
            <mal:acknowledgement>
            </mal:acknowledgement>
            <mal:update>
              <mal:field name="requestInstances" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="RequestInstance"/>
              </mal:field>
            </mal:update>
            <mal:response>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:progressIP>

      </mal:capabilitySet>

    </mal:service>

    <mal:service name="PlanDistribution" number="2" comment="The Plan Distribution Service, introduced in 2.5.3, is provided by a planning function and enables its consumers to access generated plans and to receive updates on their status.  It comprises the operations defined below, of which only those in capability set 1 are mandatory.">

      <mal:documentation name="High-level Requirements" order="1">
        3.6.4.1 The following set of mission planning configuration data shall be available to both provider and consumers in a any deployment of the plan distribution service:
        a) Planning Activity Definitions (as ActivityDefinition objects [4.5.2.1]);
        b) Planning Event Definitions (as EventDefinition objects [4.5.3.1]);
        c) Planning Resource Definitions (as Resource objects [4.5.4.2]) [Optional];
      </mal:documentation>
      <mal:documentation name="Functional Requirements" order="2">
        3.6.5.1 If Plan version 0 is specified in the getPlan and getPlanStatus operations, then the service provider shall assume the latest version of the Plan is required.
        3.6.5.2 In response to internal planning and feedback from external plan execution processes, the service provider shall model the status of Plan objects in accordance with the plan state model (see 4.5.6.2).
        NOTE	–	A planning function that is a service provider is not required to support real-time provision of Plan status changes.  Feedback from plan execution functions may only be processed periodically by the planning function as part of a planning cycle.
      </mal:documentation>

      <mal:capabilitySet number="1" comment="">

        <mal:requestIP name="getPlanSummaries" number="1" comment="The getPlanSummaries operation allows consumers to obtain a filtered list of currently available Plans.  The request uses the PlanFilter structure to select the set of plans of interest, using the following keys:
Domain of the Plan;
planID (key and version) of the Plan;
precursorPlan of the Plan;
status of the Plan;
originator of the Plan;
validity period of the Plan as a time window.
The response returns a list of PlanSummaryStatus structures containing the identity (key and version), descriptive header fields, and status of the Plans that match the filter.">
          <mal:messages>
            <mal:request>
              <mal:field name="planFilter" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="PlanFilter"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="planSummaries" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="PlanSummaryStatus"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

        <mal:progressIP name="getPlan" number="2" comment="The getPlan operation is used to obtain the full content of one or more known Plans.  The operation uses the Progress interaction pattern, to allow the response to be spread across multiple messages.">
          <mal:messages>
            <mal:progress>
              <mal:field name="planRefs" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="Plan"/>
              </mal:field>
            </mal:progress>
            <mal:acknowledgement>
            </mal:acknowledgement>
            <mal:update>
              <mal:field name="retrievedPlan" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="Plan"/>
              </mal:field>
            </mal:update>
            <mal:response>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:progressIP>

        <mal:requestIP name="getPlanStatus" number="3" comment="The getPlanStatus operation is used to obtain the current status of one or more known Plans.  The operation uses the Request interaction pattern.">
          <mal:messages>
            <mal:request>
              <mal:field name="planRefs" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="Plan"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="responsePlans" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="PlanUpdate"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="2" comment="">

        <mal:pubsubIP name="monitorPlanStatus" number="4" comment="The monitorPlanStatus operation is used to subscribe to status updates for a filtered set of Plans.  The operation uses the Publish-Subscribe interaction pattern, with the body of the notification message comprising a PlanUpdate for a subscribed Plan.">
          <mal:messages>
            <mal:subscriptionKeys>
              <mal:field name="planID" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="precursor" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="status" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="UShort"/>
              </mal:field>
              <mal:field name="originator" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
            </mal:subscriptionKeys>
            <mal:publishNotify>
              <mal:field name="planUpdate" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="PlanUpdate"/>
              </mal:field>
            </mal:publishNotify>
          </mal:messages>
        </mal:pubsubIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="3" comment="">

        <mal:pubsubIP name="monitorPlan" number="5" comment="The monitorPlan operation is used by a consumer to subscribe to receive new Plans, or new versions of Plans, as they published.  The operation uses the Publish-Subscribe interaction pattern, with the body of the notification message comprising a Plan.">
          <mal:messages>
            <mal:subscriptionKeys>
              <mal:field name="planID" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="precursor" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="status" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="UShort"/>
              </mal:field>
              <mal:field name="originator" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
            </mal:subscriptionKeys>
            <mal:publishNotify>
              <mal:field name="plan" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="Plan"/>
              </mal:field>
            </mal:publishNotify>
          </mal:messages>
        </mal:pubsubIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="4" comment="">

        <mal:progressIP name="queryPlan" number="6" comment="The queryPlan operation enables a consumer to retrieve a filtered set of plans, based on an extended set of filter criteria, including relevant fields of the plan information sections of the plan, as well as the type of planning activities and planning events contained within the plan.">
          <mal:messages>
            <mal:progress>
              <mal:field name="query" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="PlanQuery"/>
              </mal:field>
            </mal:progress>
            <mal:acknowledgement>
            </mal:acknowledgement>
            <mal:update>
              <mal:field name="queriedPlan" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="Plan"/>
              </mal:field>
            </mal:update>
            <mal:response>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:progressIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="5" comment="">

        <mal:requestIP name="getPartialPlan" number="7" comment="The getPartialPlan operation enables a consumer to extract a subset of a Plan that meets the supplied partialPlanFilter.  The filter can select the partial plan content based on:
a shorter period than that covered by the plan, specified by time, position, or events;
a subset of contained ActivityInstances, based on their domain, associated SubPlan or tags.
The PartialPlan returned includes the filter criteria and a version of the plan containing only the ActivityInstances that match those criteria.  It is implementation dependent what is returned in terms of events and resources, but it may be assumed that any related events and resources would be included in the returned partial plan.">
          <mal:messages>
            <mal:request>
              <mal:field name="partialPlanFilter" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="PartialPlanFilter"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="partialPlan" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="PartialPlan"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

      </mal:capabilitySet>

    </mal:service>

    <mal:service name="PlanExecutionControl" number="3" comment="The Plan Execution Control Service, introduced in 2.5.4, is provided by a plan execution function and enables its consumers to submit (and revoke) Plans for execution; to control their execution at plan, sub-plan, and activity levels; and to receive feedback on their execution status.  It comprises the operations defined below, of which only those in capability set 1 are mandatory.">

      <mal:documentation name="High-level Requirements" order="1">
        3.7.4.1 The following set of mission planning configuration data shall be available to both provider and consumers in a any deployment of the plan execution control service:
        a) Planning Activity Definitions (as ActivityDefinition objects [4.5.2.1]);
        b) Planning Event Definitions (as EventDefinition objects [4.5.3.1]);
        c) Planning Resource Definitions (as Resource objects [4.5.4.2]) [Optional];
      </mal:documentation>
      <mal:documentation name="Functional Requirements" order="2">
        3.7.5.1 In response to a submitPlan operation, the service provider shall make the submitted Plan available for execution.
        3.7.5.2 If the service does not support plan activation (capability set 2), the service provider shall provide an internal mechanism to activate submitted Plans.
        NOTE	–	This may be as simple as to automatically activate Plans on submission.
        3.7.5.3 In response to a revokePlan operation, the service provider shall make the submitted Plan unavailable for execution.  If this is not possible (for example, if the plan has already executed), then a REVOKE_FAILED error shall be returned.
        3.7.5.4 In response to internal plan execution processes, the service provider shall model the status of Plans in accordance with the plan state model (see 4.5.6.2).
        3.7.5.5 In response to an activatePlan operation, or internal plan activation where not supported, the service provider shall enable the execution of the referenced Plans and the ActivityInstances contained within them, subject to the triggering constraints specified within the Plans.
        3.7.5.6 In response to an activatePlan operation, if a referenced Plan overlaps with its already activated precursor Plan, then the service provider should merge plan revisions into the currently active Plan.
        NOTE	–	It is implementation dependent whether overlapping Plans are supported and how this is managed internally by the plan execution function.  However, it is common for successive iterations of a Plan to overlap, for example with a Plan being generated daily for the coming week.  In this case, the same ActivityInstance may appear in the overlap period of both Plans, and may be unchanged, modified or deleted in the successor Plan.  New ActivityInstances may also be inserted in the overlap period or in the extended period covered by the successor Plan.  It is anticipated that when the successor Plan is activated, then its predecessor is superseded from the start point of the successor Plan with any revisions applicable to the overlap period being applied.  Only the latest revision of the ActivityInstance is executed.
        3.7.5.7 In response to an activatePlan operation, if a referenced Plan is a target or Patch Plan, then the service provider shall also activate the associated precursor Plan.
        NOTES
        1 It is implementation dependent whether the target Plan is reconstituted prior to activation, or the precursor is activated and the Patch Plan merged into this.
        2 If the precursor Plan is already activated, then the Patch Plan can be merged into the currently active Plan.  If the precursor Plan is not available, then the operation cannot be performed.
        3.7.5.8 It shall not be possible to activate a Plan if it is outside the validity period of the Plan, or if the start of the Plan period has already passed.  In this case, the activatePlan operation shall fail by returning error ACTIVATE_FAILED.
        3.7.5.9 In response to a deactivatePlan operation, if supported, the service provider shall disable the execution of the referenced Plans and the ActivityInstances contained within them, subject to the specified deactivationMode.
        NOTE	–	Supported deactivationModes are specific to the implementation of the service provider.
        3.7.5.10 If Plan version 0 is specified in the getPlanStatus, monitorPlanExecution, and monitorPlanExecutionDetail operations, then the service provider shall assume the latest version of the Plan is required.
        3.7.5.11 If the monitorPlanExecutionDetail operation (or activity level operations) are supported, then in response to internal plan execution processes, the service provider shall model the status of ActivityInstances and EventInstances in accordance with their respective state models (4.5.2.2 and 4.5.3.2).
        3.7.5.12 If the monitorPlanExecutionDetail operation is supported, the service provider may model the evolving value of planning Resources in accordance with the ResourceProfiles (4.5.4.4) defined within Plans and any Effects (4.6.6.4.7.3) associated with ActivityInstances.
        3.7.5.13 If SubPlans are supported, the service provider shall maintain the current status of SubPlans as ACTIVATED or DEACTIVATED.
        NOTE	–	The status of SubPlans is independent to that of Plans and a change in their activation status has no impact on the status of the Plan.  It may impact the status of individual ActivityInstances, which can be observed using the monitorPlanExecutionDetail operation.
        3.7.5.14 In response to an activateSubPlan operation, if supported, the service provider shall activate the referenced SubPlans and enable the execution of ActivityInstances that are contained in activated Plans and allocated to activated SubPlans.
        NOTE	–	It is implementation dependent whether SubPlans are initially ACTIVATED and therefore do not require activation unless previously deactivated.
        3.7.5.15 In response to a deactivateSubPlan operation, if supported, the service provider shall deactivate the referenced SubPlans and disable the execution of ActivityInstances that are contained in activated Plans and allocated to deactivated SubPlans, subject to the specified deactivationMode.
        NOTE	–	Supported deactivationModes are specific to the implementation of the service provider.
        3.7.5.16 In response to a suspendActivity operation, if supported, the service provider shall suspend the execution of referenced ActivityInstances, subject to the specified suspensionMode.
        NOTE	–	Supported suspensionModes are specific to the implementation of the service provider.
        3.7.5.17 In response to a resumeActivity operation, if supported, the service provider shall resume the execution of the referenced ActivityInstances where it is safe to do so.
      </mal:documentation>

      <mal:capabilitySet number="1" comment="">

        <mal:submitIP name="submitPlan" number="1" comment="The submitPlan operation is used to send a plan to a plan execution function (the service provider), making it available for execution.  The service provider acknowledges the reception of the plan or returns an error.
NOTE	–	The submitted plan may be a full plan or a patch plan.">
          <mal:messages>
            <mal:submit>
              <mal:field name="plan" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="Plan"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The submitPlan operation failed as the submitted plan was already terminated.">
              <mal:type name="SUBMIT_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="An optional data structure used in the message is not supported by the service provider.">
              <mal:type name="UNSUPPORTED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of MAL::Strings giving a dot-separated nested index for the unsupported field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.">
                <mal:type area="MAL" name="String" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>

        <mal:submitIP name="revokePlan" number="2" comment="The revokePlan operation is used to request a plan execution function to revoke a previously submitted Plan, making it unavailable for execution.  The service provider acknowledges the revocation of the Plan or returns an error.">
          <mal:messages>
            <mal:submit>
              <mal:field name="planRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The revokePlan operation failed to revoke the referenced Plan, for example because it has already started executing.">
              <mal:type name="REVOKE_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>

        <mal:requestIP name="getPlanStatus" number="3" comment="The getPlanStatus operation is used to obtain the current status of one or more known Plans that have been previously submitted to a plan execution function.">
          <mal:messages>
            <mal:request>
              <mal:field name="planRefs" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="Plan"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="planStatus" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="PlanUpdate"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="2" comment="">

        <mal:requestIP name="activatePlan" number="4" comment="The activatePlan operation is used to request the execution of specified Plans that have previously been submitted to a plan execution function.  The service provider enables the execution of the referenced Plans and the ActivityInstances contained within them, subject to the triggering constraints specified within the Plans.  It is not possible to activate a Plan outside its validity period, or after the start of the Plan period.  In this case, the operation will return an ACTIVATE_FAILED error.
NOTES
Multiple plans with a common precursor may have been submitted to a plan execution function.  Usually only one of these is considered the nominal plan, the other alternative or contingency plans having the isAlternate flag set.  It is implementation dependent whether the service provider will allow activation of Plans that have the isAlternate flag set, but this may be blocked for operational safety.  Where this is the case, the plan edit service can be used to change the state of the isAlternate flag prior to activation (see 3.9.5).
In order to activate a patch Plan, the precursor Plan on which it is based must also be activated.  It is recommended that the activatePlan operation references the target Plan (the result of merging the patch Plan with its precursor), rather than the patch Plan itself (although this is allowed).  It is implementation dependent how it is achieved (merge patch with precursor prior to activation, or activate precursor and then merge patch), but if the precursor Plan is not already activated, then activating a target or patch Plan implies that the precursor is also activated.  If the precursor plan has not previously been submitted to the service provider (or has been revoked), then it is not possible to activate the target or patch Plan.">
          <mal:messages>
            <mal:request>
              <mal:field name="planRefs" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="Plan"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="activationStatus" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="PlanActivationStatus"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The activatePlan operation failed as the activation was outside the validity period of the Plan, or the start of the planPeriod had already passed.  ">
              <mal:type name="ACTIVATE_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo indicates ‘Validity’ or ‘Expired’ as appropriate.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

        <mal:requestIP name="deactivatePlan" number="5" comment="The deactivatePlan operation is used to request deactivation of specified Plans that have previously been activated.  The service provider disables the execution of the referenced Plans and the ActivityInstances contained within them, where it is possible to do so.
The deactivationMode argument allows selection of the deactivation behaviour.  For example:
Orderly (ceases execution of any new activities, but allows those already initiated to complete);
Rapid (ceases execution of the Plan, but allows activities already initiated to continue until their next defined breakpoint);
Immediate (ceases execution of the Plan and all activities currently in progress).
It should be noted that it is dependent on the service provider implementation which deactivationModes are supported, and that the above list is not exhaustive.
The service provider returns a list of PlanActivationStatus data structures comprising Plan status and activationInfo as a String for each Plan in the deactivation list.  The activationInfo allows the return of deployment specific details on the deactivation, such as the deactivation mode applied or reasons for a failure to deactivate.
If a Plan is deactivated prior to any of its constituent ActivityInstances being executed (or before the specified planPeriodStart), then all new ActivityInstances and EventInstances contained in the Plan are unloaded or removed, and the status of the Plan reverts to SUBMITTED.
If a Plan is deactivated after any of its constituent ActivityInstances have been executed (or after the specified planPeriodStart), then the status of the Plan and the status of all contained ActivityInstances and EventInstances that will not be executed are set to TERMINATED with the additional statusInfo ‘CANCELLED’.">
          <mal:messages>
            <mal:request>
              <mal:field name="planRefs" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="Plan"/>
              </mal:field>
              <mal:field name="deactivationMode" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="activationStatus" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="PlanActivationStatus"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The deactivatePlan operation failed.">
              <mal:type name="DEACTIVATE_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="3" comment="">

        <mal:pubsubIP name="monitorPlanExecution" number="6" comment="The monitorPlanExecution operation is used to subscribe to status updates for a filtered set of Plans that have been submitted to a plan execution function.  The operation uses the Publish-Subscribe interaction pattern, with the body of the notification message comprising a PlanUpdate for a subscribed Plan.
The operation is equivalent to the monitorPlanStatus operation of the Plan Distribution Service, but only reports the status of plans currently being managed by a plan execution function.">
          <mal:messages>
            <mal:subscriptionKeys>
              <mal:field name="planID" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="precursor" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="status" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="UShort"/>
              </mal:field>
              <mal:field name="originator" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
            </mal:subscriptionKeys>
            <mal:publishNotify>
              <mal:field name="planUpdate" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="PlanUpdate"/>
              </mal:field>
            </mal:publishNotify>
          </mal:messages>
        </mal:pubsubIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="4" comment="">

        <mal:pubsubIP name="monitorPlanExecutionDetail" number="7" comment="The monitorPlanExecutionDetail operation is used to subscribe to updates that report changes in the detailed execution status for a filtered set of Plan contents at the level of planning activities, events and resources.  A planning function requires feedback at the level of planning activities and events to be able to reconstitute the status of planning requests, as well to support re-planning.  The operation uses the Publish-Subscribe interaction pattern.
It is implementation dependent which details are reported on, but this may be any combination of planning activities, events, and resources.  The notification message body comprises a single structure of the abstract class PlanDetailUpdate, which corresponds to one of the concrete classes ActivityUpdate, EventUpdate, or ResourceUpdate.">
          <mal:messages>
            <mal:subscriptionKeys>
              <mal:field name="planID" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="subPlan" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="tag" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="String"/>
              </mal:field>
              <mal:field name="type" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
            </mal:subscriptionKeys>
            <mal:publishNotify>
              <mal:field name="detailUpdate" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="PlanDetailUpdate"/>
              </mal:field>
            </mal:publishNotify>
          </mal:messages>
        </mal:pubsubIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="5" comment="">

        <mal:requestIP name="activateSubPlan" number="8" comment="The activateSubPlan operation is used to request that the service provider activates the referenced SubPlans and enables the execution of ActivityInstances that are contained in activated Plans and allocated to activated SubPlans.
NOTE
It is implementation dependent whether SubPlans are initially ACTIVATED and therefore do not require activation unless previously deactivated.
Where the operation is directly supported by the service provider there is little reason for the activation to fail, but if the operation is delegated, for example to an on-board planning function, there is the potential for the operation to fail.">
          <mal:messages>
            <mal:request>
              <mal:field name="subPlanIDs" canBeNull="false" comment="">
                <mal:type area="MAL" list="true" objectRef="false" name="Identifier"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="activationStatus" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="SubPlanActivationStatus"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The activateSubPlan operation failed.">
              <mal:type name="ACTIVATE_SUBPLAN_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

        <mal:requestIP name="deactivateSubPlan" number="9" comment="The deactivateSubPlan operation is used to request that the service provider deactivates the referenced SubPlans and disables the execution of ActivityInstances that are contained in activated Plans and allocated to the deactivated SubPlans, where it is possible to do so.
The deactivationMode argument allows selection of the deactivation behaviour.  For example:
Orderly (ceases execution of any new activities, but allows those already initiated to complete);
Rapid (ceases execution of the Sub-plan, but allows activities already initiated to continue until their next defined breakpoint);
Immediate (ceases execution of the Sub-plan and all activities currently in progress).
It should be noted that it is dependent on the service provider implementation which deactivationModes are supported, and that the above list is not exhaustive.
The service provider returns a list of SubPlanActivationStatus data structures comprising sub-plan status and activationInfo as a String for each sub-plan in the deactivation list.  The activationInfo allows the return of deployment specific details on the deactivation, such as the deactivation mode applied or reasons for a failure to deactivate.
NOTE	–	Where the operation is directly supported by the service provider there is little reason for the deactivation to fail, but if the operation is delegated, for example to an on-board planning function, there is the potential for the operation to fail.">
          <mal:messages>
            <mal:request>
              <mal:field name="subPlanIDs" canBeNull="false" comment="">
                <mal:type area="MAL" list="true" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="deactivationMode" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="String"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="activationStatus" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="SubPlanActivationStatus"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The deactivateSubPlan operation failed.">
              <mal:type name="DEACTIVATE_SUBPLAN_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

        <mal:requestIP name="getSubPlanStatus" number="10" comment="The getSubPlanStatus operation is used to obtain the current status of one or more SubPlans.">
          <mal:messages>
            <mal:request>
              <mal:field name="subPlanIDs" canBeNull="false" comment="">
                <mal:type area="MAL" list="true" objectRef="false" name="Identifier"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="subPlanStatus" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="SubPlanUpdate"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="6" comment="">

        <mal:pubsubIP name="monitorSubPlanExecution" number="11" comment="The monitorSubPlanExecution operation is used to subscribe to status updates for a filtered set of SubPlans.  The operation uses the Publish-Subscribe interaction pattern, with the body of the notification message comprising a SubPlanUpdate for a subscribed sub-plan.">
          <mal:messages>
            <mal:subscriptionKeys>
              <mal:field name="subPlan" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
              </mal:field>
            </mal:subscriptionKeys>
            <mal:publishNotify>
              <mal:field name="subPlanUpdate" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="SubPlanUpdate"/>
              </mal:field>
            </mal:publishNotify>
          </mal:messages>
        </mal:pubsubIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="7" comment="">

        <mal:requestIP name="suspendActivity" number="12" comment="The suspendActivity operation is used to request suspension of the execution of selected activities in one or more plans, without changing the state of the plan(s).
The suspensionMode argument allows selection of the suspension behaviour.  For example:
Orderly (suspends execution of any new activities, but allows those already initiated to complete);
Rapid (suspends execution of any new activities, but allows any activities and their sub-activities already initiated to continue until their next defined breakpoint);
Immediate (suspends execution of all activities, including those currently in progress).
It should be noted that it is dependent on the service provider implementation which deactivationModes are supported, and that the above list is not exhaustive.
The service provider responds with a list of ActivitySuspensionStatus data structures comprising activity status and suspensionInfo (as a String) for each activity subject to the suspension request.
The suspensionInfo allows the return of deployment specific details on the suspension, such as the suspension mode applied or reasons for a failure to suspend.">
          <mal:messages>
            <mal:request>
              <mal:field name="planRefs" canBeNull="true" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="Plan"/>
              </mal:field>
              <mal:field name="activityRefs" canBeNull="true" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="ActivityInstance"/>
              </mal:field>
              <mal:field name="tags" canBeNull="true" comment="">
                <mal:type area="MAL" list="true" objectRef="false" name="String"/>
              </mal:field>
              <mal:field name="suspensionMode" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="String"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="suspensionStatus" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="ActivitySuspensionStatus"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

        <mal:requestIP name="resumeActivity" number="13" comment="The resumeActivity operation is used to request resumption of the execution of selected activities in one or more plans, without changing the state of the plan(s).
The service provider responds with a list of ActivitySuspensionStatus data structures comprising activity status and suspensionInfo (as a String) for each activity subject to the resumption request.
The suspensionInfo allows the return of deployment specific details on the resumption, such as the reasons for a failure to resume.">
          <mal:messages>
            <mal:request>
              <mal:field name="planRefs" canBeNull="true" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="Plan"/>
              </mal:field>
              <mal:field name="activityRefs" canBeNull="true" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="ActivityInstance"/>
              </mal:field>
              <mal:field name="tags" canBeNull="true" comment="">
                <mal:type area="MAL" list="true" objectRef="false" name="String"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="suspensionStatus" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="ActivitySuspensionStatus"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="8" comment="">

        <mal:requestIP name="getActivityStatus" number="14" comment="The getActivityStatus operation is used to request a detailed report from the service provider on the current status of ActivityInstances, selected at activity, sub-plan, or tag levels.">
          <mal:messages>
            <mal:request>
              <mal:field name="planRefs" canBeNull="true" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="Plan"/>
              </mal:field>
              <mal:field name="activityRefs" canBeNull="true" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="ActivityInstance"/>
              </mal:field>
              <mal:field name="subPlans" canBeNull="true" comment="">
                <mal:type area="MAL" list="true" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="tags" canBeNull="true" comment="">
                <mal:type area="MAL" list="true" objectRef="false" name="String"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="activityStatus" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="ActivityUpdate"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

      </mal:capabilitySet>

    </mal:service>

    <mal:service name="PlanInformationManagement" number="4" comment="The Plan Information Management Service, introduced in 2.5.5, is provided by a planning function and enables its consumers to list and retrieve available MPS configuration data.  This includes definitions for planning requests, planning activities, planning events and planning resources, and also MPS system configuration data.  The service may also be provided by a plan execution function (excluding planning request definitions).  It comprises the operations defined below, none of which are mandatory.">

      <mal:documentation name="High-level Requirements" order="1">
        3.8.4.1 The following set of mission planning configuration data shall be available to the provider in any deployment of the plan information management service:
        a) Planning Request Definitions (as RequestDefinition objects [4.5.5.1]);
        b) Planning Activity Definitions (as ActivityDefinition objects [4.5.2.1]);
        c) Planning Event Definitions (as EventDefinition objects [4.5.3.1]);
        d) Planning Resource Definitions (as Resource objects [4.5.4.2]) [Optional];
      </mal:documentation>
      <mal:documentation name="Functional Requirements" order="2">
        3.8.5.1 If version 0 is specified for the definition to be retrieved in a list[Item]Defs operation then the service provider shall list all available versions of the definition.
        3.8.5.2 If version 0 is specified for the definition to be retrieved in a get[Item]Defs operation then the service provider shall return the latest available version of the definition.
      </mal:documentation>

      <mal:capabilitySet number="1" comment="">

        <mal:progressIP name="listRequestDefs" number="1" comment="The listRequestDefs operation is used to obtain a list of available RequestDefinitions (key and version) together with their descriptions.  The list can be filtered by domain or restricted to specified definition IDs.  All available versions are listed.
The domain field is an ordered list of identifiers representing a domain hierarchy, any node of which can use ‘*’ as a wildcard (meaning any domain identifier at that level of the hierarchy).  If a set of domains is required that cannot be represented through the use of wildcards, then the operation will need to be repeated using different domain filters.">
          <mal:messages>
            <mal:progress>
              <mal:field name="domain" canBeNull="true" comment="">
                <mal:type area="MAL" list="true" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="requestDefs" canBeNull="true" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="RequestDefinition"/>
              </mal:field>
            </mal:progress>
            <mal:acknowledgement>
            </mal:acknowledgement>
            <mal:update>
              <mal:field name="requestDefs" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="DefListEntry"/>
              </mal:field>
            </mal:update>
            <mal:response>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:progressIP>

        <mal:requestIP name="getRequestDefs" number="2" comment="The getRequestDefs operation is used to retrieve one or more available RequestDefinitions, whose identity is known to the consumer.">
          <mal:messages>
            <mal:request>
              <mal:field name="requestDefs" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="RequestDefinition"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="definitions" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="RequestDefinition"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="2" comment="">

        <mal:progressIP name="listEventDefs" number="3" comment="The listEventDefs operation is used to obtain a list of available EventDefinitions (key and version) together with their descriptions.  The list can be filtered by domain or restricted to specified definition IDs.  All available versions are listed.
The domain field is an ordered list of identifiers representing a domain hierarchy, any node of which can use ‘*’ as a wildcard (meaning any domain identifier at that level of the hierarchy).  If a set of domains is required that cannot be represented through the use of wildcards, then the operation will need to be repeated using different domain filters.">
          <mal:messages>
            <mal:progress>
              <mal:field name="domain" canBeNull="true" comment="">
                <mal:type area="MAL" list="true" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="eventDefs" canBeNull="true" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="EventDefinition"/>
              </mal:field>
            </mal:progress>
            <mal:acknowledgement>
            </mal:acknowledgement>
            <mal:update>
              <mal:field name="eventDefs" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="DefListEntry"/>
              </mal:field>
            </mal:update>
            <mal:response>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:progressIP>

        <mal:requestIP name="getEventDefs" number="4" comment="The getEventDefs operation is used to retrieve one or more available EventDefinitions, whose identity is known to the consumer.">
          <mal:messages>
            <mal:request>
              <mal:field name="eventDefs" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="EventDefinition"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="definitions" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="EventDefinition"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="3" comment="">

        <mal:progressIP name="listActivityDefs" number="5" comment="The listActivityDefs operation is used to obtain a list of available ActivityDefinitions (key and version) together with their descriptions.  The list can be filtered by domain or restricted to specified definition IDs.  All available versions are listed.
The domain field is an ordered list of identifiers representing a domain hierarchy, any node of which can use ‘*’ as a wildcard (meaning any domain identifier at that level of the hierarchy).  If a set of domains is required that cannot be represented through the use of wildcards, then the operation will need to be repeated using different domain filters.">
          <mal:messages>
            <mal:progress>
              <mal:field name="domain" canBeNull="true" comment="">
                <mal:type area="MAL" list="true" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="activityDefs" canBeNull="true" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="ActivityDefinition"/>
              </mal:field>
              <mal:field name="defaultTags" canBeNull="true" comment="">
                <mal:type area="MAL" list="true" objectRef="false" name="String"/>
              </mal:field>
            </mal:progress>
            <mal:acknowledgement>
            </mal:acknowledgement>
            <mal:update>
              <mal:field name="activitytDefs" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="DefListEntry"/>
              </mal:field>
            </mal:update>
            <mal:response>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:progressIP>

        <mal:requestIP name="getActivityDefs" number="6" comment="The getActivityDefs operation is used to retrieve one or more available ActivityDefinitions, whose identity is known to the consumer.">
          <mal:messages>
            <mal:request>
              <mal:field name="activityDefs" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="ActivityDefinition"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="definitions" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="ActivityDefinition"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="4" comment="">

        <mal:progressIP name="listResourceDefs" number="7" comment="The listResourceDefs operation is used to obtain a list of available Resources (key and version) together with their descriptions.  The list can be filtered by domain or restricted to data types.  All available versions are listed.
The domain field is an ordered list of identifiers representing a domain hierarchy, any node of which can use ‘*’ as a wildcard (meaning any domain identifier at that level of the hierarchy).  If a set of domains is required that cannot be represented through the use of wildcards, then the operation will need to be repeated using different domain filters.">
          <mal:messages>
            <mal:progress>
              <mal:field name="domain" canBeNull="true" comment="">
                <mal:type area="MAL" list="true" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="dataType" canBeNull="true" comment="">
                <mal:type area="MAL" list="true" objectRef="false" name="AttributeType"/>
              </mal:field>
            </mal:progress>
            <mal:acknowledgement>
            </mal:acknowledgement>
            <mal:update>
              <mal:field name="resourceDefs" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="DefListEntry"/>
              </mal:field>
            </mal:update>
            <mal:response>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:progressIP>

        <mal:requestIP name="getResourceDefs" number="8" comment="The getResourceDefs operation is used to retrieve the definition of one or more available Resources, whose identity is known to the consumer.
It should be noted that this operation is designed to retrieve the resource definition and not the current value of the resource (the value field may contain a default value for the resource).">
          <mal:messages>
            <mal:request>
              <mal:field name="resources" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="true" name="Resource"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="definitions" canBeNull="false" comment="">
                <mal:type area="MPS" list="true" objectRef="false" name="Resource"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

      </mal:capabilitySet>

    </mal:service>

    <mal:service name="PlanEdit" number="5" comment="The Plan Edit Service, introduced in 2.5.6, is provided by a plan execution function and enables its consumers to modify Plans that have already been submitted for execution.  It allows an external user or function to update the status of the Plan; insert, modify, or delete its constituent ActivityInstances and EventInstances; update the value of Resources; and apply a time shift to a Plan.  It comprises the operations defined below, of which only those in capability set 1 are mandatory.
In some deployments, the Plan Edit Service could also be provided by a planning function to enable users to make adjustments to their planned activities prior to submission of the plan for execution.">

      <mal:documentation name="High-level Requirements" order="1">
        3.9.4.1 The following set of mission planning configuration data shall be available to both provider and consumers in a any deployment of the plan edit service:
        a) Planning Activity Definitions (as ActivityDefinition objects [4.5.2.1]);
        b) Planning Event Definitions (as EventDefinition objects [4.5.3.1]);
        c) Planning Resource Definitions (as Resource objects [4.5.4.2]) [Optional];
        d) Functional Requirements.
        3.9.4.2 In response to an updatePlanStatus operation, the service provider shall update the isAlternate flag of the Plan accordingly and apply any change to Plan status consistently with the plan state model (see 4.5.6.2).
        NOTE	–	It is implementation dependent what the service provider does in the event of a Plan status change when the Plan has executing ActivityInstances.  It is recommended that the plan execution control service is used to manage Plan deactivation in an orderly manner.
        3.9.4.3 In response to an insertActivity operation, the service provider shall create a new ActivityInstance in the referenced Plan and return its identity to the consumer.
        3.9.4.4 In response to an insertEvent operation, the service provider shall create a new EventInstance in the referenced Plan and return its identity to the consumer.
        3.9.4.5 In response to a deleteActivity operation, the service provider shall transition the referenced ActivityInstance to the TERMINATED state.
        NOTE	–	If the ActivityInstance is in the EXECUTING state, then it is implementation dependent what action is taken by the service provider.
        3.9.4.6 In response to a deleteEvent operation, the service provider shall transition the referenced EventInstance to the TERMINATED state.
        NOTE	–	This may also affect any ActivityInstances whose start or end trigger is linked to the deleted EventInstance as a terminated event will not result in the activity being triggered.
        3.9.4.7 In response to an updateActivity operation, the service provider shall apply the changes contained in the ActivityUpdate to the referenced ActivityInstance.
        3.9.4.8 In response to an updateEvent operation, the service provider shall apply the changes contained in the EventUpdate to the referenced EventInstance.
        3.9.4.9 In response to an updateResourceValue operation, the service provider shall apply the changes contained in the ResourceUpdate to the referenced Resource.
        3.9.4.10 In response to an updateResourceProfile operation, the service provider shall apply the supplied ResourceProfile to the referenced Resource.
        3.9.4.11 In response to an applyTimeShift operation, the service provider shall apply the specified time shift to the unexpired (future) content, or the specified time period of the referenced Plan or its SubPlan(s), including temporal start and end triggers on ActivityInstances.
        NOTE	–	It is implementation dependent whether any other elements of the Plan are time shifted, particularly with regard to the eventTime of EventInstances and, where supported, the start and end times on resource ProfileSegments and the times on Profile Entries.
      </mal:documentation>

      <mal:capabilitySet number="1" comment="">

        <mal:submitIP name="updatePlanStatus" number="1" comment="The updatePlanStatus operation may be used to modify the status of a previously submitted Plan.  Directly modifying the status field of a Plan may be used by a third party function to autonomously terminate (or activate) a Plan, but the operation also allows the isAlternate flag to be set or cleared.
It is implementation dependent what action the service provider takes in response to a change of Plan status.  The service provider may not permit certain state changes (for example to modify the status of a TERMINATED plan, which is inconsistent with the plan status model), in which case an UPDATE_FAILED error shall be returned.
A set of Plans with a common precursor may be submitted to a plan execution function to cater for alternative or contingency scenarios.  All but one of these Plans should have the isAlternate flag set, to inform the plan execution function (and the mission operations team) which is the nominal Plan.  It is implementation dependent whether a plan execution control service provider will allow a Plan to be activated with the isAlternate flag set, but for operational safety reasons this may be blocked.  In a contingency scenario, the updatePlanStatus operation can be used to set the flag on the nominal Plan, and reset the flag on the required contingency Plan, making it operational.">
          <mal:messages>
            <mal:submit>
              <mal:field name="planRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
              </mal:field>
              <mal:field name="status" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="PlanStatusEnum"/>
              </mal:field>
              <mal:field name="isAlternate" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The update operation (to Request, PlanStatus, Activity, Event or Resource) failed to update the referenced object.">
              <mal:type name="UPDATE_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="2" comment="">

        <mal:requestIP name="insertActivity" number="2" comment="The insertActivity operation sends an InsertedActivityDetails structure (an ActivityDetails structure with Plan reference and start/end triggers) to the provider, which then creates a corresponding ActivityInstance object in the referenced Plan and returns its identity to the consumer.  It is up to the planning system, how to manage concurrent access to the plan.
Insertion may fail if the Plan is already in the TERMINATED state, in which case an INSERT_FAILED error shall be returned.">
          <mal:messages>
            <mal:request>
              <mal:field name="activityDetails" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="InsertedActivityDetails"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="activityRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="ActivityInstance"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="An optional data structure used in the message is not supported by the service provider.">
              <mal:type name="UNSUPPORTED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of MAL::Strings giving a dot-separated nested index for the unsupported field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.">
                <mal:type area="MAL" name="String" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The insertActivity or insertEvent operation failed to insert the requested object.">
              <mal:type name="INSERT_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

        <mal:requestIP name="insertEvent" number="3" comment="The insertEvent operation sends an InsertedEventDetails structure, which includes a Plan reference, to the provider, which then creates a corresponding EventInstance object in the referenced Plan and returns its identity to the consumer.  It is up to the planning system, how to manage concurrent access to the plan.
Insertion may fail if the Plan is already in the TERMINATED state, in which case an INSERT_FAILED error shall be returned.">
          <mal:messages>
            <mal:request>
              <mal:field name="eventDetails" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="InsertedEventDetails"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="eventRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="EventInstance"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The insertActivity or insertEvent operation failed to insert the requested object.">
              <mal:type name="INSERT_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>

        <mal:submitIP name="deleteActivity" number="4" comment="The deleteActivity operation requests that a specified ActivityInstance within a Plan is deleted by the service provider.  In practice, the activity is not removed, but transitioned to the TERMINATED state with deletion indicated in the statusInfo field.  The ActivityInstance is not subsequently executed by the service provider, but it is implementation dependent what action is taken by the service provider if the ActivityInstance is in the EXECUTING state.  It is up to the planning system, how to manage concurrent access to the plan.
Deletion may fail if the referenced Plan or ActivityInstance is already in the TERMINATED state, in which case the DELETE_FAILED error shall be returned.">
          <mal:messages>
            <mal:submit>
              <mal:field name="planRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
              </mal:field>
              <mal:field name="activityRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="ActivityInstance"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The deleteActivity or deleteEvent operation failed to delete the requested object.">
              <mal:type name="DELETE_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>

        <mal:submitIP name="deleteEvent" number="5" comment="The deleteEvent operation requests that a specified EventInstance within a Plan is deleted by the service provider.  In practice, the event is not removed, but transitioned to the TERMINATED state with deletion indicated in the statusInfo field.  The EventInstance is not subsequently triggered by the service provider.  It is up to the planning system, how to manage concurrent access to the plan.
Deletion may fail if the referenced Plan or EventInstance is already in the TERMINATED state, in which case the DELETE_FAILED error shall be returned.">
          <mal:messages>
            <mal:submit>
              <mal:field name="planRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
              </mal:field>
              <mal:field name="eventRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="EventInstance"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The deleteActivity or deleteEvent operation failed to delete the requested object.">
              <mal:type name="DELETE_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="3" comment="">

        <mal:submitIP name="updateActivity" number="6" comment="The updateActivity operation may be used to modify an ActivityInstance in a Plan that has already been submitted to the service provider.  The consumer submits an ActivityUpdate structure which is applied by the service provider to the referenced ActivityInstance.  It is up to the planning system, how to manage concurrent access to the plan.
Update may fail if the referenced Plan or ActivityInstance is already in the TERMINATED state, in which case the UPDATE_FAILED error shall be returned.">
          <mal:messages>
            <mal:submit>
              <mal:field name="planRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
              </mal:field>
              <mal:field name="activityUpdate" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="ActivityUpdate"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The update operation (to Request, PlanStatus, Activity, Event or Resource) failed to update the referenced object.">
              <mal:type name="UPDATE_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>

        <mal:submitIP name="updateEvent" number="7" comment="The updateEvent operation may be used to modify an EventInstance in a Plan that has already been submitted to the service provider.  The consumer submits an EventUpdate structure which is applied by the service provider to the referenced EventInstance.  It is up to the planning system, how to manage concurrent access to the plan.
Update may fail if the referenced Plan or EventInstance is already in the TERMINATED state, in which case the UPDATE_FAILED error shall be returned.">
          <mal:messages>
            <mal:submit>
              <mal:field name="planRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
              </mal:field>
              <mal:field name="eventUpdate" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="EventUpdate"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The update operation (to Request, PlanStatus, Activity, Event or Resource) failed to update the referenced object.">
              <mal:type name="UPDATE_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="4" comment="">

        <mal:submitIP name="updateResourceValue" number="8" comment="The updateResourceValue operation may be used to modify the value of a Resource at the specified point in time, in a Plan that has already been submitted to the service provider.  The consumer submits a ResourceUpdate structure which is applied by the service provider to the referenced Resource.  It is up to the planning system, how to manage concurrent access to the plan.
Update may fail if the referenced Plan is already in the TERMINATED state, in which case the UPDATE_FAILED error shall be returned.">
          <mal:messages>
            <mal:submit>
              <mal:field name="planRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
              </mal:field>
              <mal:field name="resourceUpdate" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="ResourceUpdate"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="An optional data structure used in the message is not supported by the service provider.">
              <mal:type name="UNSUPPORTED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of MAL::Strings giving a dot-separated nested index for the unsupported field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.">
                <mal:type area="MAL" name="String" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The update operation (to Request, PlanStatus, Activity, Event or Resource) failed to update the referenced object.">
              <mal:type name="UPDATE_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="5" comment="">

        <mal:submitIP name="updateResourceProfile" number="9" comment="The updateResourceProfile operation may be used to modify the value of a Resource over a period of time, in a Plan that has already been submitted to the service provider.  The consumer submits an ResourceProfile structure which is applied by the service provider to the referenced Resource.  It is up to the planning system, how to manage concurrent access to the plan.
Update may fail if the referenced Plan is already in the TERMINATED state, in which case the UPDATE_FAILED error shall be returned.">
          <mal:messages>
            <mal:submit>
              <mal:field name="planRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
              </mal:field>
              <mal:field name="resourceProfile" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="ResourceProfile"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="An optional data structure used in the message is not supported by the service provider.">
              <mal:type name="UNSUPPORTED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of MAL::Strings giving a dot-separated nested index for the unsupported field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.">
                <mal:type area="MAL" name="String" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The update operation (to Request, PlanStatus, Activity, Event or Resource) failed to update the referenced object.">
              <mal:type name="UPDATE_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>

      </mal:capabilitySet>

      <mal:capabilitySet number="6" comment="">

        <mal:submitIP name="applyTimeShift" number="10" comment="The applyTimeShift operation may be used to request a shift in the timing by a fixed offset of the ActivityInstances, EventInstances, and ResourceProfiles contained within a Plan that has previously been submitted to a plan execution function.  The operation may also be restricted to one or more SubPlans within the referenced Plan and/or to a specified time period within the Plan.  The service provider applies the time shift to the timing of ActivityInstances, EventInstances, and ResourceProfiles contained within the Plan or SubPlan(s).
The time shift may fail if the referenced Plan is already in the TERMINATED state, in which case the UPDATE_FAILED error shall be returned.
The operation is designed to support backward compatibility with simple time-based on-board schedules, and may not be appropriate for use with plans that include event or position-based triggers and resource profiles.  What is shifted within the Plan is implementation dependent, but shall include time-based start and end triggers on ActivityInstances.  EventInstances may also be shifted, but it is noted that some EventInstances correspond to predicted orbital events that cannot meaningfully be shifted.  Similarly, where supported, resource profiles may reflect the ActivityInstances contained within the Plan and if those are shifted, the corresponding changes in Resource value should also be shifted.
NOTE	–	ActivityInstances have duration which means they may overlap the start or end of the specified TimeWindow for the applicability of the time shift.  It is implementation dependent how this is managed, but a reasonable assumption is that the start time of the ActivityInstances must be within the specified TimeWindow.  Given the potential to introduce inconsistencies into a Plan, it must be assumed that users of this service operation understand both its operational implications and its specific implementation.">
          <mal:messages>
            <mal:submit>
              <mal:field name="planRef" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
              </mal:field>
              <mal:field name="subPlans" canBeNull="true" comment="">
                <mal:type area="MAL" list="true" objectRef="false" name="Identifier"/>
              </mal:field>
              <mal:field name="timePeriod" canBeNull="false" comment="">
                <mal:type area="MPS" list="false" objectRef="false" name="TimeWindow"/>
              </mal:field>
              <mal:field name="offset" canBeNull="false" comment="">
                <mal:type area="MAL" list="false" objectRef="false" name="Duration"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One or more fields in the message contain invalid values.">
              <mal:type name="INVALID" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo comprises a list of structures, each identifying an invalid field, comprising:
A MAL::String giving a dot-separated nested index for the invalid field(s). This allows for fields that are themselves a structure or list element to be denoted. For example, the form ‘3.2.4’ could mean the 4th element of the 2nd field of the composite structure that is the 3rd field of the message.
A MAL::UShort giving a secondary error code that details the reason for invalidity.">
                <mal:type area="MAL" name="Pair" list="true"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="The update operation (to Request, PlanStatus, Activity, Event or Resource) failed to update the referenced object.">
              <mal:type name="UPDATE_FAILED" area="MPS"/>
              <mal:extraInformation comment="ExtraInfo provides additional information on the reason for failure as a free format string.">
                <mal:type area="MAL" name="String" list="false"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>

      </mal:capabilitySet>

    </mal:service>

    <mal:dataTypes>

      <mal:composite name="ActivityDefinition" shortFormPart="101" comment="E1: An ActivityDefinition is an MO object that contains static configuration data relating to multiple occurrences of a planning activity.  Its identity is defined by a definitionID, which includes a constant key and an evolving version that is updated each time the definition is revised.  ActivityDefinitions form part of the planning configuration data.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Object"/>
        </mal:extends>
        <mal:field name="description" canBeNull="false" comment="Description of the Activity.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="argDefs" canBeNull="true" comment="List of Argument Definitions.">
          <mal:type area="MPS" list="true" objectRef="false" name="ArgDef"/>
        </mal:field>
        <mal:field name="constraints" canBeNull="true" comment="A single constraint or a constraint node that may contain multiple constraints, applicable to all instances of the Activity.">
          <mal:type area="MPS" list="false" objectRef="false" name="Constraint"/>
        </mal:field>
        <mal:field name="effects" canBeNull="true" comment="Set of Effects applicable to all instances of the Activity.">
          <mal:type area="MPS" list="true" objectRef="false" name="Effect"/>
        </mal:field>
        <mal:field name="executionDefinition" canBeNull="true" comment="Reference to the definition of an executable body for the Activity (procedure, action sequence, etc.).  The manner in which this reference is interpreted is implementation-specific.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="durationSpec" canBeNull="true" comment="Supports calculation of an estimated duration of an Activity Instance.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="children" canBeNull="true" comment="Set of activity details specifying child activities.">
          <mal:type area="MPS" list="true" objectRef="false" name="ActivityDetails"/>
        </mal:field>
        <mal:field name="activityType" canBeNull="true" comment="Free-text field that can be used to categorize an activity into one of several arbitrary categories. Enables a planning system to customize behavior for activities, such as their presentation in displays, based on the specified value.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="defaultTags" canBeNull="true" comment="Default set of Tags that may be used to associate the Activity with others, grouping activities by operational responsibility (controller/group/system) or other criteria.">
          <mal:type area="MAL" list="true" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ActivityInstance" shortFormPart="102" comment="E1: An ActivityInstance is an MO object that contains the identity of a specific occurrence of a planning activity, together with both static and dynamic information associated with that occurrence.  It supports relationships to its definition, source, a related planning event and any child activities.
ActivityInstances may be contained within a Plan.
NOTE	–	The start and end fields specify the trigger conditions (including time) that specify when the ActivityInstance starts and/or ends in the context of a Plan.  The duration is an estimate of the time taken to execute the ActivityInstance rather than an offset, which may for example be used in the visualization of a Plan.  Duration may be used in conjunction with a specified end trigger to determine the planned start time of an ActivityInstance.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Object"/>
        </mal:extends>
        <mal:field name="definition" canBeNull="false" comment="Reference to the ActivityDefinition.">
          <mal:type area="MPS" list="false" objectRef="true" name="ActivityDefinition"/>
        </mal:field>
        <mal:field name="source" canBeNull="false" comment="Object Type: RequestInstance | ActivityInstance | PlanningUser
Reference to the source of the ActivityInstance, which is either its parent ActivityInstance, a RequestInstance if it is a root Activity, or a PlanningUser if directly inserted.">
          <mal:type area="MAL" list="false" objectRef="true" name="Element"/>
        </mal:field>
        <mal:field name="relatedEvent" canBeNull="true" comment="Optional reference to an EventInstance that is specifically associated with this instance of the Activity.  Typically the Activity is placed in response to the Event.">
          <mal:type area="MPS" list="false" objectRef="true" name="EventInstance"/>
        </mal:field>
        <mal:field name="children" canBeNull="true" comment="References to any child ActivityInstances.">
          <mal:type area="MPS" list="true" objectRef="true" name="ActivityInstance"/>
        </mal:field>
        <mal:field name="comments" canBeNull="true" comment="Any notes associated with this instance of the Activity.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="constraints" canBeNull="true" comment="A single constraint or a constraint node that may contain multiple constraints, applicable to this instance of the Activity.">
          <mal:type area="MPS" list="false" objectRef="false" name="Constraint"/>
        </mal:field>
        <mal:field name="effects" canBeNull="true" comment="Set of Effects applicable to this instance of the Activity.">
          <mal:type area="MPS" list="true" objectRef="false" name="Effect"/>
        </mal:field>
        <mal:field name="arguments" canBeNull="true" comment="Argument values for each Argument defined in the Activity Definition.">
          <mal:type area="MPS" list="true" objectRef="false" name="Argument"/>
        </mal:field>
        <mal:field name="start" canBeNull="true" comment="Optionally specifies the trigger that initiates the Activity: may be Time, Position or Event based.">
          <mal:type area="MPS" list="false" objectRef="false" name="Trigger"/>
        </mal:field>
        <mal:field name="end" canBeNull="true" comment="Optionally specifies the trigger that ends the Activity.">
          <mal:type area="MPS" list="false" objectRef="false" name="Trigger"/>
        </mal:field>
        <mal:field name="duration" canBeNull="true" comment="Optional duration of the Activity (estimated until execution, actual post execution).">
          <mal:type area="MAL" list="false" objectRef="false" name="Duration"/>
        </mal:field>
        <mal:field name="subPlan" canBeNull="true" comment="Optional association of the Activity with a defined sub-plan.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="tags" canBeNull="true" comment="Set of Tags that may be used to associate the Activity with others, grouping activities by operational responsibility (controller/group/system) or other criteria.">
          <mal:type area="MAL" list="true" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="status" canBeNull="false" comment="Current Status of the Activity Instance (see Activity State Model in 4.5.2.2).">
          <mal:type area="MPS" list="false" objectRef="false" name="ActivityStatusEnum"/>
        </mal:field>
        <mal:field name="executionInstance" canBeNull="true" comment="Reference to the instance of an executable body for the Activity (procedure, action sequence, etc.).  The manner in which this reference is interpreted is implementation specific.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="returnData" canBeNull="true" comment="Optional return data from the planning process, provided as a list of ID-Value pairs.  This can be used to provide additional information required by the User to interpret the planned activity.">
          <mal:type area="MAL" list="true" objectRef="false" name="NamedValue"/>
        </mal:field>
        <mal:field name="statusInfo" canBeNull="true" comment="StatusInfo provides the reason for entering the Terminated State and is customizable, but if the following conditions exist then the specified text shall be used:
- Completed (nominal);
- Expired (prior to Activation or during plan Suspension);
- Deleted;
- Failed (see ErrorCode/ErrorInfo).">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="errorCode" canBeNull="true" comment="Error Code optional in the case of a failure status for the planning activity (for example Terminated state with statusInfo Failed).  The codes are implementation specific.">
          <mal:type area="MAL" list="false" objectRef="false" name="Integer"/>
        </mal:field>
        <mal:field name="errorInfo" canBeNull="true" comment="Supplementary Error Information.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="EventDefinition" shortFormPart="201" comment="E1: An EventDefinition is an MO object that contains static configuration data relating to multiple occurrences of a planning event.  Its identity is defined by a definitionID, which includes a constant key and an evolving version, which is updated each time the definition is revised.  Event definitions form part of the planning configuration data.
Events may be either Predicted or Potential.  Events that are predictable either by time or position can have specific instances included in a Plan.  Potential events are those that may occur during the execution of a Plan, but the specific time or position is not predicted.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Object"/>
        </mal:extends>
        <mal:field name="description" canBeNull="false" comment="Description of the event.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="predictability" canBeNull="false" comment="Enumeration: one of {Predicted, Potential} indicating whether the event occurrence is known in advance or can occur at any time.  ">
          <mal:type area="MPS" list="false" objectRef="false" name="PredictabilityEnum"/>
        </mal:field>
        <mal:field name="eventType" canBeNull="true" comment="Free-text field that can be used to categorize an event into one of several arbitrary categories. Enables a planning system to customize behaviour for events, such as their presentation in displays, based on the specified value.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="argDefs" canBeNull="true" comment="List of argument definitions.">
          <mal:type area="MPS" list="true" objectRef="false" name="ArgDef"/>
        </mal:field>
        <mal:field name="eventDefinitions" canBeNull="true" comment="List of child event definitions.  For a single event, this list shall be empty; for a group event, the list shall be populated.">
          <mal:type area="MPS" list="true" objectRef="true" name="EventDefinition"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="EventInstance" shortFormPart="202" comment="E1: An EventInstance is an MO object that contains the identity of a specific occurrence of a planning event, together with both static and dynamic information associated with that occurrence.  It supports relationships to its definition and source.
The source of an EventInstance may be an external event, corresponding to a NAV Predicted Event or a CSS Contact Event.
EventInstances may be contained within a Plan.
EventInstances may be referenced as a related event by an ActivityInstance, so that the ActivityInstance can reference the timing and arguments of the related EventInstance.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Object"/>
        </mal:extends>
        <mal:field name="definition" canBeNull="false" comment="Reference to the EventDefinition.">
          <mal:type area="MPS" list="false" objectRef="true" name="EventDefinition"/>
        </mal:field>
        <mal:field name="sourceEvent" canBeNull="true" comment="Reference to an external source event (e.g., NAV predicted event, or CSS contact event).">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="events" canBeNull="true" comment="List of references to child EventInstances.  For a single event, this list is empty; for a group event, the list will be populated.">
          <mal:type area="MPS" list="true" objectRef="true" name="EventInstance"/>
        </mal:field>
        <mal:field name="eventTime" canBeNull="true" comment="Predicted or actual time of the event.  EventTime is nullable: it can be predicted without an eventTime (e.g., if position based).">
          <mal:type area="MAL" list="false" objectRef="false" name="FineTime"/>
        </mal:field>
        <mal:field name="arguments" canBeNull="true" comment="Argument values for each argument defined in the EventDefinition.">
          <mal:type area="MPS" list="true" objectRef="false" name="Argument"/>
        </mal:field>
        <mal:field name="eventStatus" canBeNull="false" comment="Current status of the event instance (see event state model in 4.5.3.2).">
          <mal:type area="MPS" list="false" objectRef="false" name="EventStatusEnum"/>
        </mal:field>
        <mal:field name="statusInfo" canBeNull="true" comment="StatusInfo provides the reason for entering the terminated state and is customizable, but if the following conditions exist then the specified text shall be used:
- Occurred (Event has been triggered);
- Did Not Occur (Event expired or did not occur within validity period);
- Deleted (Event was deleted).">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="Resource" shortFormPart="301" comment="E4: A resource is an MO object that contains both the static fields that define a planning resource and a dynamic field that holds its current value.  Its identity is defined by a constant key and evolving version, which is updated each time the definition is revised.  Resource definitions form part of the planning configuration data and in practice the value field may be omitted in this context, although it may also be used to provide an initial or default value.
Depending on the resource data type, the resource definition may require additional type-specific fields to support data validation.  Sub-types are defined for Numeric, String, and enumerated Status type resources.  The base Resource MO object type can be used where no data validation is applicable.  The following fields are applicable to the base type and all sub-types.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Object"/>
        </mal:extends>
        <mal:field name="description" canBeNull="false" comment="Description of the Resource.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="dataType" canBeNull="false" comment="Specifies the data type of the Resource, which must be a supported MAL Attribute type.">
          <mal:type area="MAL" list="false" objectRef="false" name="AttributeType"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="Optional.  Specifies the units of a single quantity, in which the value of the Resource is expressed in.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="validationData" canBeNull="true" comment="Optional.  Specifies the allowed range of values for the Resource, with concrete subtypes specific to the data type of the Resource.">
          <mal:type area="MPS" list="false" objectRef="false" name="ValidationDetails"/>
        </mal:field>
        <mal:field name="value" canBeNull="true" comment="Value of the resource.  MAL Attribute type must match the dataType of the Resource definition.
The value is only nullable in the context of a Resource definition (planning configuration data).">
          <mal:type area="MAL" list="false" objectRef="false" name="Attribute"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="RequestDefinition" shortFormPart="401" comment="E1: A RequestDefinition is an MO object that contains the specification of a re-usable planning request template.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Object"/>
        </mal:extends>
        <mal:field name="description" canBeNull="false" comment="Description of the re-usable RequestDefinition.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="argDefs" canBeNull="true" comment="List of argument definitions.  Arguments may be referenced in ActivityDetails and constraints.">
          <mal:type area="MPS" list="true" objectRef="false" name="ArgDef"/>
        </mal:field>
        <mal:field name="standingOrder" canBeNull="false" comment="A flag that indicates whether the planning request is for a repetitive standing order (unbounded other than by the validity period), or is a one-off request.  If it is a standing order, then the supplied activity details must be an ActivityNode with specification of the repetition criteria.  It should be noted that a one-off request can still include repetition.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="activities" canBeNull="false" comment="Set of activity details specifying requested activities.">
          <mal:type area="MPS" list="true" objectRef="false" name="ActivityDetails"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="RequestInstance" shortFormPart="402" comment="E1: A RequestInstance is an MO object that contains the specification of a planning request.  This may change over time if the request is updated by the user, each comprising a separate version of the request with the same object key.
In the context of a hierarchical or federated planning system, a RequestInstance can be used to submit a Plan  (4.5.6) to a planning function, either embedding the Plan in the RequestInstance or passing it by reference.  If passed by reference, the Plan can be retrieved using the Plan Distribution Service (3.6).  Patch plans are not permitted in this context.
NOTE	–	RequestInstances may be created from a RequestDefinition that has defined arguments (as ArgDefs) and will in this case have the associated Arguments.  An ad-hoc RequestInstance is not anticipated to hold any Arguments.  The values that can be parameterized through the arguments of a re-usable RequestDefinition can be directly entered in a RequestInstance, and there would be no corresponding ArgDef associated with any Arguments supplied.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Object"/>
        </mal:extends>
        <mal:field name="requestDetails" canBeNull="false" comment="The contents of the planning request.">
          <mal:type area="MPS" list="false" objectRef="false" name="PlanningRequestDetails"/>
        </mal:field>
        <mal:field name="creationTime" canBeNull="false" comment="Creation date and time of the RequestInstance version.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
        <mal:field name="status" canBeNull="false" comment="Current status of the ActivityInstance (see planning request state model in 4.5.5.2).">
          <mal:type area="MPS" list="false" objectRef="false" name="RequestStatusEnum"/>
        </mal:field>
        <mal:field name="outputPlanRefs" canBeNull="true" comment="Reference to the output Plan(s) that contains the activities resulting from the planning request.  Where multiple alternate plans have been generated, these may be listed here.">
          <mal:type area="MPS" list="true" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="returnData" canBeNull="true" comment="Optional return data from the planning process, provided as a list of ID-Value pairs.  This can be used to provide additional information required by the User to interpret the planned operations.">
          <mal:type area="MAL" list="true" objectRef="false" name="NamedValue"/>
        </mal:field>
        <mal:field name="statusInfo" canBeNull="true" comment="StatusInfo provides the reason for termination and is customizable, but if the following conditions exist then the specified text shall be used:
- Completed (all constituent activities completed successfully);
- Expired (constituent activities expired prior to execution);
- Failed (constituent activities failed during execution);
- Deleted (constituent activities were deleted);
- Partially Completed.
It may also be used to provide the reason for rejection.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="errorCode" canBeNull="true" comment="Error Code optional in the case of a failure status for the planning request (for example Terminated state with statusInfo Failed).  The codes are implementation specific.">
          <mal:type area="MAL" list="false" objectRef="false" name="Integer"/>
        </mal:field>
        <mal:field name="errorInfo" canBeNull="true" comment="Supplementary error information.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="Plan" shortFormPart="501" comment="E1: A Plan is an MO object that contains both the static fields that define a version of a plan and dynamic fields that hold its current state.  Its identity is defined by a constant key and an evolving version, which is updated each time the Plan is revised.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Object"/>
        </mal:extends>
        <mal:field name="isPatchPlan" canBeNull="false" comment="Flag indicating if the Plan is a patch plan that only contains details of the changes from the precursor Plan.  A patch plan must have a precursor.  It must also include a single PlanRevision relative to the precursor Plan.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="precursorPlan" canBeNull="true" comment="Reference to a precursor (or predecessor) Plan from which the changes are detailed in the Plan.  This may be used if there is an iterative re-planning cycle in which successive plans overlap, or where a previous Plan has been updated through re-planning.  If there is no precursor, then the Plan must be a self-standing full plan.
If the Plan is a Patch Plan, then a precursor plan must be specified.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="targetPlan" canBeNull="true" comment="Applicable only for patch plans, this is a reference to the target Plan.  This target Plan is the result of applying the patch plan to the precursor Plan and is distinct from the identity of the patch plan itself.  Patch plans are not permitted in the context of a planning request.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="information" canBeNull="false" comment="Contains header information relating to the Plan, including its originator and validity period.">
          <mal:type area="MPS" list="false" objectRef="false" name="PlanInformation"/>
        </mal:field>
        <mal:field name="items" canBeNull="false" comment="Contains the planned activities and events that constitute the Plan.">
          <mal:type area="MPS" list="false" objectRef="false" name="PlannedItems"/>
        </mal:field>
        <mal:field name="revisions" canBeNull="true" comment="Details the changes between this Plan and other Plans (or other versions of the same Plan), usually the precursor Plan.  Optional, but must contain at least one element in a patch plan.
Multiple revisions may be included, documenting the differences with any other version of a Plan.  This can be used to provide a change history for successive versions of the same Plan, or to document the differences between alternate Plans.">
          <mal:type area="MPS" list="true" objectRef="false" name="PlanRevision"/>
        </mal:field>
        <mal:field name="resources" canBeNull="true" comment="Optional.  If present, must contain one ResourceProfile per planning resource. These profiles shall provide the projected evolution of the value of a planning resource, or its initial value at the start of the Plan. Which approach is used is a deployment choice.">
          <mal:type area="MPS" list="true" objectRef="false" name="ResourceProfile"/>
        </mal:field>
        <mal:field name="isAlternate" canBeNull="false" comment="Flag indicating if the Plan has currently been released as an Operational or Alternate plan.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="status" canBeNull="false" comment="Current status of the Plan.">
          <mal:type area="MPS" list="false" objectRef="false" name="PlanStatusEnum"/>
        </mal:field>
        <mal:field name="statusInfo" canBeNull="true" comment="Supplementary information for a Plan in the Terminated state.  This is customizable, but if the following conditions exist then the specified text shall be used:
- Completed (nominal);
- Superseded (by a successor Plan);
- Revoked;
- Cancelled (deactivated after start of execution);
- Expired.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PlanningUser" shortFormPart="601" comment="E1: The source of a planning request is the user that raises it, and this is identified in the user field of a RequestInstance as a reference to a PlanningUser object.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Object"/>
        </mal:extends>
      </mal:composite>

      <mal:composite name="PlanDetailUpdate" comment="E1: Specifically in the case of reporting the detailed execution status of a plan, updates may be reported for multiple object types: planning activities, planning events, and planning resources. To support this an abstract type of PlanDetailUpdate is defined as follows.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
      </mal:composite>

      <mal:composite name="ActivityDetails" comment="E1: Contains the information required to create one or more ActivityInstances, including the specification of argument values and constraints.
It should be noted that the activityRef and activityOffset fields are only relevant in the case that a Repetition has been specified in a parent ActivityNode.  Temporal and sequential constraints associated with the ActivityInstance can be specified as constraints attached to a concrete SimpleActivityDetails structure.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="activityRef" canBeNull="true" comment="Specifies how the ActivityInstance is placed with respect to any defined Repetition (0=Start; 1=End).
Default is Start.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="activityOffset" canBeNull="true" comment="Specifies an offset in time for the ActivityInstance from any defined Repetition.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="relatedEvent" canBeNull="true" comment="Object Type: EventInstance.
Specifies a related Event (or Event Group) for the ActivityInstance.  Argument specifications and constraints may reference arguments and fields of the RelatedEvent.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="comments" canBeNull="true" comment="Any notes associated with the ActivityDetails.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ActivityNode" shortFormPart="104" comment="E1: A concrete sub-type of ActivityDetails, an ActivityNode is a container node for a set of ActivityDetails together with an optional Repetition specification.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="ActivityDetails"/>
        </mal:extends>
        <mal:field name="repetition" canBeNull="true" comment="Optional Repetition specification.">
          <mal:type area="MPS" list="false" objectRef="false" name="Repetition"/>
        </mal:field>
        <mal:field name="activities" canBeNull="true" comment="Set of ActivityDetails.">
          <mal:type area="MPS" list="true" objectRef="false" name="ActivityDetails"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="SimpleActivityDetails" shortFormPart="105" comment="E1: A concrete sub-type of ActivityDetails, a SimpleActivityDetails provides the information required to instantiate a single ActivityInstance.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="ActivityDetails"/>
        </mal:extends>
        <mal:field name="activityDefinition" canBeNull="false" comment="Reference to the ActivityDefinition.">
          <mal:type area="MPS" list="false" objectRef="true" name="ActivityDefinition"/>
        </mal:field>
        <mal:field name="argSpecs" canBeNull="true" comment="Set of argument specifications for each argument definition contained in the referenced activity definition.  These supply a value for each argument, or an expression to enable the value to be derived.">
          <mal:type area="MPS" list="true" objectRef="false" name="ArgSpec"/>
        </mal:field>
        <mal:field name="constraints" canBeNull="true" comment="A single constraint or a constraint node that may contain multiple constraints, specific to the ActivityInstance to be created.">
          <mal:type area="MPS" list="false" objectRef="false" name="Constraint"/>
        </mal:field>
        <mal:field name="effects" canBeNull="true" comment="Set of Effects specific to the ActivityInstance to be created.">
          <mal:type area="MPS" list="true" objectRef="false" name="Effect"/>
        </mal:field>
        <mal:field name="subPlan" canBeNull="true" comment="Optional association of the ActivityInstance with a defined sub-plan.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="tags" canBeNull="true" comment="Set of tags that may be used to associate the Activity with an identified subset of the Plan, grouping activities by operational responsibility (controller/group/system) or other criteria.">
          <mal:type area="MAL" list="true" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ActivityUpdate" shortFormPart="106" comment="E1: ActivityUpdate is a data structure that is used to report the dynamic status of an ActivityInstance in the context of the MPS Plan Execution Control service monitorPlanExecutionDetail and getActivityStatus operations.
ActivityUpdates may be distributed to subscribing applications, including status displays, to inform them of the latest status of the activity.  This may be particularly relevant in conjunction with a plan execution function.  ActivityUpdates may be stored in activity history to provide a complete record of evolving status over time.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="PlanDetailUpdate"/>
        </mal:extends>
        <mal:field name="activityInstance" canBeNull="false" comment="Reference to the ActivityInstance to which the status update relates.">
          <mal:type area="MPS" list="false" objectRef="true" name="ActivityInstance"/>
        </mal:field>
        <mal:field name="timestamp" canBeNull="true" comment="Time of status update.
Only nullable in the context of an updateActivity operation: the timestamp must be provided when reporting ActivityInstance status.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
        <mal:field name="plan" canBeNull="true" comment="Optional reference to the Plan containing the ActivityInstance to which this update pertains.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="arguments" canBeNull="true" comment="Argument values.">
          <mal:type area="MPS" list="true" objectRef="false" name="Argument"/>
        </mal:field>
        <mal:field name="start" canBeNull="true" comment="Optionally specifies the trigger that initiates the ActivityInstance: may be time, position, or event based.">
          <mal:type area="MPS" list="false" objectRef="false" name="Trigger"/>
        </mal:field>
        <mal:field name="end" canBeNull="true" comment="Optionally specifies the trigger that ends the ActivityInstance.">
          <mal:type area="MPS" list="false" objectRef="false" name="Trigger"/>
        </mal:field>
        <mal:field name="duration" canBeNull="true" comment="Optional duration of the ActivityInstance (estimated until execution, actual post execution).">
          <mal:type area="MAL" list="false" objectRef="false" name="Duration"/>
        </mal:field>
        <mal:field name="subPlan" canBeNull="true" comment="Optional association of the ActivityInstance with a defined sub-plan.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="tags" canBeNull="true" comment="Set of tags that may be used to associate the ActivityInstance with an identified subset of the Plan, grouping activities by operational responsibility (controller/group/system) or other criteria.">
          <mal:type area="MAL" list="true" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="status" canBeNull="false" comment="Current status of the ActivityInstance.">
          <mal:type area="MPS" list="false" objectRef="false" name="ActivityStatusEnum"/>
        </mal:field>
        <mal:field name="executionInstance" canBeNull="true" comment="Reference to the instance of an executable body for the ActivityInstance (procedure, action sequence, etc.).  The manner in which this reference is interpreted is implementation-specific.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="returnData" canBeNull="true" comment="Optional return data from the planning process, provided as a list of ID-Value pairs.  This can be used to provide additional information required by the User to interpret the planned activity.">
          <mal:type area="MAL" list="true" objectRef="false" name="NamedValue"/>
        </mal:field>
        <mal:field name="statusInfo" canBeNull="true" comment="StatusInfo provides the reason for entering the Terminated State and is customizable, but if the following conditions exist then the specified text shall be used:
- Completed (nominal);
- Expired (prior to Activation or during plan Suspension);
- Deleted;
- Failed (see ErrorCode/ErrorInfo).">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="errorCode" canBeNull="true" comment="Error Code optional in the case of a failure status for the planning activity (for example Terminated state with statusInfo Failed).  The codes are implementation specific.">
          <mal:type area="MAL" list="false" objectRef="false" name="Integer"/>
        </mal:field>
        <mal:field name="errorInfo" canBeNull="true" comment="Supplementary error information.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="InsertedActivityDetails" shortFormPart="107" comment="E1: A concrete sub-type of ActivityDetails (see 4.5.2.3) that is a variation of SimpleActivityDetails providing additional details for a single ActivityInstance to be inserted into a Plan using the MPS Plan Edit service.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="ActivityDetails"/>
        </mal:extends>
        <mal:field name="plan" canBeNull="false" comment="Reference to the Plan into which the ActivityInstance is to be inserted.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="start" canBeNull="true" comment="Optionally specifies the trigger that initiates the ActivityInstance: may be time, position, or event based.">
          <mal:type area="MPS" list="false" objectRef="false" name="Trigger"/>
        </mal:field>
        <mal:field name="end" canBeNull="true" comment="Optionally specifies the trigger that ends the ActivityInstance.">
          <mal:type area="MPS" list="false" objectRef="false" name="Trigger"/>
        </mal:field>
        <mal:field name="activityDefinition" canBeNull="false" comment="Reference to the ActivityDefinition.">
          <mal:type area="MPS" list="false" objectRef="true" name="ActivityDefinition"/>
        </mal:field>
        <mal:field name="argSpecs" canBeNull="true" comment="Set of argument specifications for each argument definition contained in the referenced activity definition.  These supply a value for each argument, or an expression to enable the value to be derived.">
          <mal:type area="MPS" list="true" objectRef="false" name="ArgSpec"/>
        </mal:field>
        <mal:field name="constraints" canBeNull="true" comment="A single constraint or a constraint node that may contain multiple constraints, specific to the ActivityInstance to be created.">
          <mal:type area="MPS" list="false" objectRef="false" name="Constraint"/>
        </mal:field>
        <mal:field name="effects" canBeNull="true" comment="Set of Effects specific to the ActivityInstance to be created.">
          <mal:type area="MPS" list="true" objectRef="false" name="Effect"/>
        </mal:field>
        <mal:field name="subPlan" canBeNull="true" comment="Optional association of the ActivityInstance with a defined sub-plan.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="tags" canBeNull="true" comment="Set of tags that may be used to associate the Activity with a subset of the Plan, grouping activities by operational responsibility (controller/group/system) or other criteria.">
          <mal:type area="MAL" list="true" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ActivitySuspensionStatus" shortFormPart="108" comment="E1: A data structure that returns the status and supplementary suspension information for an ActivityInstance affected by an MPS Plan Execution Control service suspendActivity or resumeActivity operation.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="activityInstance" canBeNull="false" comment="Reference to an ActivityInstance.">
          <mal:type area="MPS" list="false" objectRef="true" name="ActivityInstance"/>
        </mal:field>
        <mal:field name="plan" canBeNull="true" comment="Optional reference to the Plan containing the ActivityInstance.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="status" canBeNull="false" comment="Current Status of the ActivityInstance.">
          <mal:type area="MPS" list="false" objectRef="false" name="ActivityStatusEnum"/>
        </mal:field>
        <mal:field name="suspensionInfo" canBeNull="true" comment="Supplementary information on the suspension/resumption status of the ActivityInstance.
This may detail the point of suspension, which may be specific to the suspension mode; or a reason why resumption was not possible.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="EventUpdate" shortFormPart="205" comment="E1: EventUpdate is a data structure that is used to report the dynamic status of an EventInstance in the context of the MPS Plan Execution Control service monitorPlanExecutionDetail operation.
EventUpdates may be distributed to subscribing applications, including status displays, to inform them of the latest status of the event.  This may be particularly relevant in conjunction with a plan execution function.  EventUpdates may be stored in event history to provide a complete record of evolving status over time.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="PlanDetailUpdate"/>
        </mal:extends>
        <mal:field name="eventInstance" canBeNull="false" comment="Reference to the EventInstance to which the status update relates.">
          <mal:type area="MPS" list="false" objectRef="true" name="EventInstance"/>
        </mal:field>
        <mal:field name="timestamp" canBeNull="false" comment="Time of status update.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
        <mal:field name="eventTime" canBeNull="false" comment="Predicted or actual time of the event.  EventTime is nullable: it can be predicted without an EventTime (e.g., if position based).">
          <mal:type area="MAL" list="false" objectRef="false" name="FineTime"/>
        </mal:field>
        <mal:field name="arguments" canBeNull="true" comment="Argument values.">
          <mal:type area="MPS" list="true" objectRef="false" name="Argument"/>
        </mal:field>
        <mal:field name="eventStatus" canBeNull="false" comment="Current status of the EventInstance.">
          <mal:type area="MPS" list="false" objectRef="false" name="EventStatusEnum"/>
        </mal:field>
        <mal:field name="statusInfo" canBeNull="true" comment="StatusInfo provides the reason for entering the Terminated state and is customizable, but if the following conditions exist then the specified text shall be used:
- Occurred (Event has been triggered);
- Did Not Occur (Event expired or did not occur within validity period);
- Deleted (Event was deleted).">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="InsertedEventDetails" shortFormPart="206" comment="E1: A data structure that provides the information required to create the EventInstance to be inserted into a Plan using the MPS Plan Edit service.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="plan" canBeNull="false" comment="Reference to the Plan into which the Event is to be inserted.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="eventDefinition" canBeNull="false" comment="Reference to the EventDefinition.">
          <mal:type area="MPS" list="false" objectRef="true" name="EventDefinition"/>
        </mal:field>
        <mal:field name="eventTime" canBeNull="false" comment="Specifies the predicted or actual time of the event.  For an inserted event this must be present.">
          <mal:type area="MAL" list="false" objectRef="false" name="FineTime"/>
        </mal:field>
        <mal:field name="arguments" canBeNull="true" comment="Argument values.">
          <mal:type area="MPS" list="true" objectRef="false" name="Argument"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="NumericResource" shortFormPart="302" comment="E4: An additional concrete sub-type of ValidationDetails applicable only to Resources of any numeric type, including Duration, that provides additional fields for the specification of numeric data validation.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="ValidationDetails"/>
        </mal:extends>
        <mal:field name="minimum" canBeNull="false" comment="Defines the permitted minimum value over time.">
          <mal:type area="MPS" list="false" objectRef="false" name="ResourceProfile"/>
        </mal:field>
        <mal:field name="maximum" canBeNull="false" comment="Defines the permitted maximum value over time.">
          <mal:type area="MPS" list="false" objectRef="false" name="ResourceProfile"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ResourceProfile" shortFormPart="303" comment="E4: A ResourceProfile provides the evolution of a value for a single planning resource over time as a set of ProfileSegments.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="resource" canBeNull="false" comment="Reference to a Resource.">
          <mal:type area="MPS" list="false" objectRef="true" name="Resource"/>
        </mal:field>
        <mal:field name="profileSegments" canBeNull="false" comment="Set of Profile Segments; if these segments are not contiguous, the value of the profile in those places is undefined. The resulting behaviour may be defined by the planning system.">
          <mal:type area="MPS" list="true" objectRef="false" name="ProfileSegment"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ProfileSegment" shortFormPart="304" comment="E4: A ProfileSegment defines the time range and interpolation method for a set of ProfileEntries.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="interpolation" canBeNull="true" comment="Interpolation method to be applied for values lying between points defined in the profile segment.
Default = Step.">
          <mal:type area="MPS" list="false" objectRef="false" name="InterpolationTypeEnum"/>
        </mal:field>
        <mal:field name="start" canBeNull="false" comment="Start of time range covered by the profile segment.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="end" canBeNull="false" comment="End of time range covered by the profile segment.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="startIncluded" canBeNull="true" comment="Indicates whether the start time is included in the profile segment.
Default = True.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="endIncluded" canBeNull="true" comment="Indicates whether the end time is included in the profile segment.  This allows the same time to be used as the end of one segment and the start of another.
Default = False.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="profileEntries" canBeNull="false" comment="Set of profile entries (resource value points).">
          <mal:type area="MPS" list="true" objectRef="false" name="ProfileEntry"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ProfileEntry" shortFormPart="306" comment="E4: Defines the value (or minimum/maximum value) of a resource at a particular point in time.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="time" canBeNull="false" comment="Time of resource data point.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="value" canBeNull="false" comment="Value of resource data point.">
          <mal:type area="MAL" list="false" objectRef="false" name="Attribute"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="RelativeResourceProfile" shortFormPart="307" comment="E4: A variation on ResourceProfile, the RelativeResourceProfile uses relative timestamps of type Duration (indicating an offset from a reference time, such as the start time of an Activity).  RelativeResourceProfiles are used in the context of a complex resource constraint.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="resource" canBeNull="false" comment="Reference to a Resource.">
          <mal:type area="MPS" list="false" objectRef="true" name="Resource"/>
        </mal:field>
        <mal:field name="profileSegments" canBeNull="false" comment="Set of RelativeProfileSegments.">
          <mal:type area="MPS" list="true" objectRef="false" name="RelativeProfileSegment"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="RelativeProfileSegment" shortFormPart="308" comment="E4: A RelativeResourceSegment defines the time range and interpolation method for a set of RelativeProfileEntries.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="interpolation" canBeNull="true" comment="Interpolation method to be applied for values lying between points defined in the relative profile segment.
Default = Step.">
          <mal:type area="MPS" list="false" objectRef="false" name="InterpolationTypeEnum"/>
        </mal:field>
        <mal:field name="start" canBeNull="false" comment="Relative start of time range covered by the relative profile segment.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="end" canBeNull="false" comment="Relative end of time range covered by the relative profile segment.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="startIncluded" canBeNull="true" comment="Indicates whether the start time is included in the relative profile segment.
Default = True.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="endIncluded" canBeNull="true" comment="Indicates whether the end time is included in the relative profile segment.  This allows the same time to be used as the end of one segment and the start of another.
Default = False.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="profileEntries" canBeNull="false" comment="Set of relative profile entries (resource value points).">
          <mal:type area="MPS" list="true" objectRef="false" name="RelativeProfileEntry"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="RelativeProfileEntry" shortFormPart="309" comment="E4: Defines the value (or minimum/maximum value) of a resource at a relative point in time.
Specific sub-types exist for each allowed data type for a Resource.  These replace the variant type value field with one of concrete data type.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="time" canBeNull="false" comment="Relative time of resource data point.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="value" canBeNull="false" comment="Value of resource data point.">
          <mal:type area="MAL" list="false" objectRef="false" name="Attribute"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ResourceUpdate" shortFormPart="310" comment="E4: ResourceUpdate is a data structure that is used to report the value of a Resource at a given point in time in the context of the MPS Plan Execution Control service monitorPlanExecutionDetail operation, or to supply an updated value for a Resource in the context of the MPS Plan Edit service.
Resource updates may be distributed to subscribing applications, including status displays, to inform them of the latest value of the Resource.  This may be particularly relevant in conjunction with a plan execution function.  Resource updates may be stored in resource history to provide a complete record of evolving value over time.
Resource updates are also effectively contained within a Plan to describe the predicted evolution of Resources over the duration of that Plan.  However, in this context the ResourceProfile construct is used (see 4.5.4.4 above).">
        <mal:extends>
          <mal:type area="MPS" list="false" name="PlanDetailUpdate"/>
        </mal:extends>
        <mal:field name="resource" canBeNull="false" comment="Reference to the Resource to which the value update relates.">
          <mal:type area="MPS" list="false" objectRef="true" name="Resource"/>
        </mal:field>
        <mal:field name="timestamp" canBeNull="false" comment="Time of Resource value update.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
        <mal:field name="value" canBeNull="false" comment="Value of the resource.  MAL Attribute type must match the dataType of the resource definition.">
          <mal:type area="MAL" list="false" objectRef="false" name="Attribute"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="RequestStatusUpdate" shortFormPart="404" comment="E1: RequestStatusUpdate is a data structure that is used to report changes in status of the RequestInstance as it proceeds through both planning and plan execution functions.  Reporting is the responsibility of the planning function.
Planning request status updates may be distributed to subscribing applications, including both Users and status displays, to inform them of the latest status of the planning request.  This may be particularly relevant in conjunction with a plan execution function.  Status updates may be stored in planning request history to provide a complete record of evolving status over time.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="requestInstance" canBeNull="false" comment="Reference to the planning request instance to which the status update relates.">
          <mal:type area="MPS" list="false" objectRef="true" name="RequestInstance"/>
        </mal:field>
        <mal:field name="timestamp" canBeNull="false" comment="Time of status update.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
        <mal:field name="status" canBeNull="false" comment="Current status of the planning request.">
          <mal:type area="MPS" list="false" objectRef="false" name="RequestStatusEnum"/>
        </mal:field>
        <mal:field name="outputPlanRefs" canBeNull="true" comment="Reference to the output Plan(s) that contains the activities resulting from the planning request.  Where multiple alternate plans have been generated, these may be listed here.  It should be noted that this is only available once the planning request has been processed and successfully planned.  The outputPlanRefs may be updated following iterative planning cycles or re-planning.">
          <mal:type area="MPS" list="true" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="returnData" canBeNull="true" comment="Optional return data from the planning process, provided as a list of ID-Value pairs.  This can be used to provide additional information required by the User to interpret the planned operations.">
          <mal:type area="MAL" list="true" objectRef="false" name="NamedValue"/>
        </mal:field>
        <mal:field name="statusInfo" canBeNull="true" comment="StatusInfo provides the reason for termination and is customizable, but if the following conditions exist then the specified text shall be used:
- Completed (all constituent activities completed successfully);
- Expired (constituent activities expired prior to execution);
- Failed (constituent activities failed during execution);
- Deleted (constituent activities were deleted);
- PartiallyCompleted.
It may also be used to provide the reason for rejection.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="errorCode" canBeNull="true" comment="Error Code optional in the case of a failure status for the planning request (for example Terminated state with statusInfo Failed).  The codes are implementation specific.">
          <mal:type area="MAL" list="false" objectRef="false" name="Integer"/>
        </mal:field>
        <mal:field name="errorInfo" canBeNull="true" comment="Supplementary error information.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PlanningRequestDetails" shortFormPart="405" comment="E1: PlanningRequestDetails is a data structure used in the context of the MPS Planning Request service SubmitRequest and UpdateRequest operations, where the RequestInstance MO object cannot be used as the full identity of the resulting RequestInstance (key and version) is not yet known.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="userReference" canBeNull="false" comment="User supplied reference for the planning request.  This is distinct from the identity of the RequestInstance that is assigned by the planning function.  No guarantees are made by the planning system about the contents of this identifier; that is entirely up to the user who supplies the reference.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="definition" canBeNull="true" comment="Reference to the RequestDefinition from which the RequestInstance was created, if a planning request template was used.">
          <mal:type area="MPS" list="false" objectRef="true" name="RequestDefinition"/>
        </mal:field>
        <mal:field name="planningPeriod" canBeNull="false" comment="Specifies which planning period the planning request applies to.  Planning period IDs are mission specific, but can be used to indicate mission phase; planning cycle; or ‘semester’ in observatory missions.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="validityTimes" canBeNull="true" comment="Validity period for the planning request, expressed as one or more time windows.  The planning request must be satisfied within this period.
When multiple TimeWindows are provided, the planning request may be satisfied within any individual TimeWindow.
If this field is null, no restriction is placed on the times between which this request must be planned.">
          <mal:type area="MPS" list="true" objectRef="false" name="TimeWindow"/>
        </mal:field>
        <mal:field name="validityEvents" canBeNull="true" comment="Validity period for the planning request, expressed as one or more event windows.  The planning request must be satisfied within this period.
When multiple EventWindows are provided, the planning request may be satisfied within any individual EventWindow.
If this field is null, no restriction is placed on any events between which this request must be planned.">
          <mal:type area="MPS" list="true" objectRef="false" name="EventWindow"/>
        </mal:field>
        <mal:field name="timeSystem" canBeNull="true" comment="Specifies the time system used for all time fields within the planning request (see 4.4.1).
If null, the default time system is used.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="user" canBeNull="false" comment="The User ID for the person or organization raising the planning request.">
          <mal:type area="MPS" list="false" objectRef="true" name="PlanningUser"/>
        </mal:field>
        <mal:field name="description" canBeNull="false" comment="Description of the request.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="arguments" canBeNull="true" comment="List of named argument values.  If created from a template planning request, this will include the arguments defined in the RequestDefinition.">
          <mal:type area="MPS" list="true" objectRef="false" name="Argument"/>
        </mal:field>
        <mal:field name="standingOrder" canBeNull="false" comment="A flag that indicates whether the planning request is for a repetitive standing order (unbounded other than by the validity period), or is a one-off request.  If it is a standing order, then the supplied activity details must be an ActivityNode with specification of the repetition criteria.  It should be noted that a one-off request can still include repetition.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="activities" canBeNull="false" comment="Set of activity details specifying requested activities.">
          <mal:type area="MPS" list="true" objectRef="false" name="ActivityDetails"/>
        </mal:field>
        <mal:field name="inputPlanRef" canBeNull="true" comment="Reference to an existing Plan (output of one planning function) submitted as a planning request to another planning function in the context of a distributed or hierarchical planning system.
Only one of inputPlanRef and inputPlan should be present within the planning request.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="inputPlan" canBeNull="true" comment="An existing Plan  (output of one planning function) submitted as a planning request to another planning function in the context of a distributed or hierarchical planning system.  The Plan is embedded within the planning request.
Only one of inputPlanRef and inputPlan should be present within the planning request.">
          <mal:type area="MPS" list="false" objectRef="false" name="Plan"/>
        </mal:field>
        <mal:field name="comments" canBeNull="true" comment="Free text for any additional user comments about the request.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PlanningRequestResponse" shortFormPart="406" comment="E1: PlanningRequestResponse is a data structure used in the context of the MPS Planning Request service SubmitRequest and UpdateRequest operations, in response to the submitted PlanningRequestDetails defined above.  It contains a reference to the created RequestInstance and the supplied userReference to allow the user to correlate the two.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="instance" canBeNull="false" comment="Reference to the RequestInstance created in response to a SubmitRequest operation, or the updated version of the RequestInstance following an UpdateRequest operation.">
          <mal:type area="MPS" list="false" objectRef="true" name="RequestInstance"/>
        </mal:field>
        <mal:field name="userReference" canBeNull="false" comment="User supplied reference for the planning request.  This is distinct from the identity of the RequestInstance that is assigned by the planning function.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="RequestSummaryStatus" shortFormPart="407" comment="E1: RequestSummaryStatus is a data structure used in the context of the MPS Planning Request service getRequestSummaries operation, where a list of these structures is returned.  It contains header fields of the planning request and its status, but not the request content (arguments, activities and constraints).">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="requestInstance" canBeNull="false" comment="Reference to the RequestInstance (key and version).">
          <mal:type area="MPS" list="false" objectRef="true" name="RequestInstance"/>
        </mal:field>
        <mal:field name="userReference" canBeNull="true" comment="Optional user supplied reference for the planning request.  This is distinct from the identity of the RequestInstance that is assigned by the planning function.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="creationTime" canBeNull="false" comment="Creation date and time of the RequestInstance version.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
        <mal:field name="definition" canBeNull="true" comment="Reference to the RequestDefinition from which the RequestInstance was created, if a planning request template was used.">
          <mal:type area="MPS" list="false" objectRef="true" name="RequestDefinition"/>
        </mal:field>
        <mal:field name="planningPeriod" canBeNull="false" comment="Specifies which planning period the planning request applies to.  Planning period IDs are mission specific, but can be used to indicate mission phase; planning cycle; or ‘semester’ in observatory missions.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="validityTimes" canBeNull="true" comment="Validity period for the planning request, expressed as one or more time windows.  The planning request must be satisfied within this period.
Only one of validityTime or validityEvent should be present in a planning request.">
          <mal:type area="MPS" list="true" objectRef="false" name="TimeWindow"/>
        </mal:field>
        <mal:field name="validityEvents" canBeNull="true" comment="Validity period for the planning request, expressed as one or more event windows.  The planning request must be satisfied within this period.
Only one of validityTime or validityEvent should be present in a planning request.">
          <mal:type area="MPS" list="true" objectRef="false" name="EventWindow"/>
        </mal:field>
        <mal:field name="user" canBeNull="false" comment="The User ID for the person or organization raising the planning request.">
          <mal:type area="MPS" list="false" objectRef="true" name="PlanningUser"/>
        </mal:field>
        <mal:field name="description" canBeNull="false" comment="Description of the request.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="standingOrder" canBeNull="false" comment="A flag that indicates whether the planning request is for a repetitive standing order (unbounded other than by the validity period), or is a one-off request.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="comments" canBeNull="true" comment="Free text for any additional user comments about the request.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="status" canBeNull="false" comment="Current status of the ActivityInstance (see planning request state model in 4.5.5.2).">
          <mal:type area="MPS" list="false" objectRef="false" name="RequestStatusEnum"/>
        </mal:field>
        <mal:field name="outputPlanRefs" canBeNull="true" comment="References to output Plan(s) that contains the activities resulting from the planning request.">
          <mal:type area="MPS" list="true" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="statusInfo" canBeNull="true" comment="StatusInfo provides the reason for termination and is customizable, but includes:
- Completed (all constituent activities completed successfully);
- Expired (constituent activities expired prior to execution);
- Failed (constituent activities failed during execution);
- Deleted (constituent activities were deleted);
- PartiallyCompleted.
It may also be used to provide the reason for rejection.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="RequestFilter" shortFormPart="408" comment="E1: RequestFilter is a data structure used in the context of MPS Planning Request Service operations to specify a filtered set of planning requests.  
NOTE	–	All fields are nullable and it is valid to specify a RequestFilter with no filter criteria; this corresponds to an open filter in which all available planning requests are returned.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="domain" canBeNull="true" comment="Domain of the RequestInstance.  An ordered list representing a domain hierarchy, ‘*’ can be used to represent a wildcard at that level.">
          <mal:type area="MAL" list="true" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="instanceID" canBeNull="true" comment="Identity (key and version) of the RequestInstance.">
          <mal:type area="MPS" list="false" objectRef="true" name="RequestInstance"/>
        </mal:field>
        <mal:field name="creationTime" canBeNull="true" comment="Creation date and time of the RequestInstance version.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
        <mal:field name="definitionID" canBeNull="true" comment="Identity (key and version) of the RequestDefinition from which the RequestInstance was created.">
          <mal:type area="MPS" list="false" objectRef="true" name="RequestDefinition"/>
        </mal:field>
        <mal:field name="userID" canBeNull="true" comment="userID of the User who initiated the RequestInstance.">
          <mal:type area="MPS" list="false" objectRef="true" name="PlanningUser"/>
        </mal:field>
        <mal:field name="userReference" canBeNull="true" comment="Reference supplied by User when submitting the RequestInstance.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="status" canBeNull="true" comment="Current status (enum) of the RequestInstance.">
          <mal:type area="MPS" list="false" objectRef="false" name="RequestStatusEnum"/>
        </mal:field>
        <mal:field name="outputPlanRefs" canBeNull="true" comment="Reference to the output Plan(s) generated in response to the RequestInstance.">
          <mal:type area="MPS" list="true" objectRef="true" name="Plan"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PlanInformation" shortFormPart="503" comment="E1: The PlanInformation section of a plan contains administrative and validity details associated with the plan as a whole.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="originator" canBeNull="false" comment="Identity of the entity or system responsible for the production of the plan. The implementing planning system is responsible for defining the value to be provided for this field.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="productionTime" canBeNull="false" comment="Date and time of production of the plan.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
        <mal:field name="description" canBeNull="false" comment="Description of the plan.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="comments" canBeNull="true" comment="Field for additional comments or notes to the operations team regarding the plan.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="validityStart" canBeNull="false" comment="Start of validity period for the plan.
The validity period defines when the plan is available for operational use.  It cannot be used outside its validity period.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
        <mal:field name="validityEnd" canBeNull="false" comment="End of validity period for the plan.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
        <mal:field name="planPeriodStart" canBeNull="false" comment="Start of the plan period.
The plan period defines the start and end points of the plan.  Planned items (planning activities and events) contained within the plan must at least partially overlap the plan period.  The use of the trigger structure allows this to be specified in terms of time, position, pointing, or planning events.  Examples are:
- a specified period of time;
- an orbital repeat cycle;
- a period between two events.">
          <mal:type area="MPS" list="false" objectRef="false" name="Trigger"/>
        </mal:field>
        <mal:field name="planPeriodEnd" canBeNull="false" comment="End of the plan period.">
          <mal:type area="MPS" list="false" objectRef="false" name="Trigger"/>
        </mal:field>
        <mal:field name="timeSystem" canBeNull="true" comment="Specifies the time system used for all time fields within the Plan (see 4.4.1).
If Null, the default time system is used.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PlannedItems" shortFormPart="504" comment="E1: The PlannedItems section of the Plan specifies the set of planning activities and planning events contained within the Plan.  It comprises two lists of contained MO objects:  one of EventInstances and one of ActivityInstances.  Both lists can be empty.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="plannedEvents" canBeNull="true" comment="List of planned events contained within the Plan.">
          <mal:type area="MPS" list="true" objectRef="false" name="EventInstance"/>
        </mal:field>
        <mal:field name="plannedActivities" canBeNull="true" comment="List of planned activities contained within the Plan.">
          <mal:type area="MPS" list="true" objectRef="false" name="ActivityInstance"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PlanRevision" shortFormPart="505" comment="E3: Each PlanRevision comprises an ordered set of ItemRevisions that document the change to individual planned items (planning events and activities).  Each ItemRevision references an individual EventInstance or ActivityInstance and indicates whether the planned item is new, modified or deleted in the current Plan.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="revisedPlan" canBeNull="false" comment="Reference to the Plan (key and version) with respect to which the plan revisions are detailed.  Typically this is the precursor Plan, but any other Plan can be used.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="revisionStart" canBeNull="false" comment="Start time of the earliest revision.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
        <mal:field name="revisionEnd" canBeNull="false" comment="End time of the latest revision.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
        <mal:field name="itemRevisions" canBeNull="true" comment="Ordered list (earliest to latest) of revisions to planned items (activity and event instances).">
          <mal:type area="MPS" list="true" objectRef="false" name="ItemRevision"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ItemRevision" shortFormPart="506" comment="E3: An ItemRevision represents the changes that were made to a single planned item inside a revision.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="itemRef" canBeNull="false" comment="Object Type: ActivityInstance | EventInstance.
Reference to a planned ActivityInstance or EventInstance that is new or modified in the current Plan, or has been deleted with respect to the referenced revisedPlan.">
          <mal:type area="MAL" list="false" objectRef="true" name="Element"/>
        </mal:field>
        <mal:field name="revisionStatus" canBeNull="false" comment="Revision status of the referenced item.  May be one of New, Modified, or Deleted.
Default = Undefined.">
          <mal:type area="MPS" list="false" objectRef="false" name="RevisionStatusEnum"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PlanUpdate" shortFormPart="508" comment="E1: PlanUpdate is a data structure that is used to report changes in status of the Plan as it proceeds through both planning and plan execution functions.  It is returned in the context of the MPS Plan Distribution service getPlanStatus and monitorPlanStatus operations, and also the MPS Plan Execution Control service monitorPlanExecution and getPlanStatus operations.
PlanUpdates may be distributed to subscribing applications, including status displays, to inform them of the latest status of a Plan.  PlanUpdates may be stored in plan history to provide a complete record of evolving status over time.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="plan" canBeNull="false" comment="Reference to the Plan (key and version) to which the status update relates.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="timestamp" canBeNull="false" comment="Time of status update.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
        <mal:field name="isAlternate" canBeNull="false" comment="Flag indicating if the Plan has currently been released as an Operational or Alternate plan.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="status" canBeNull="false" comment="Current status of the Plan.">
          <mal:type area="MPS" list="false" objectRef="false" name="PlanStatusEnum"/>
        </mal:field>
        <mal:field name="statusInfo" canBeNull="true" comment="Supplementary information for a Plan in the Terminated state.  This is customizable, but if the following conditions exist then the specified text shall be used:
- Completed (nominal);
- Superseded by a successor Plan;
- Revoked by a User;
- Cancelled (deactivated after start of execution);
- Expired (reached the end of its validity period without being activated).">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PlanSummaryStatus" shortFormPart="509" comment="E1: PlanSummaryStatus is a data structure that provides a summary view of a Plan that includes the PlanInformation section and current status, but not the full details of the Plan.  It is returned in the context of the MPS Plan Distribution service GetPlanSummaries operation.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="plan" canBeNull="false" comment="Reference to the Plan (key and version) to which the summary status relates.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="isPatchPlan" canBeNull="false" comment="Flag indicating if the Plan is a patch plan that only contains details of the changes from the precursor Plan.  A patch plan must have a precursor.  It must also include a single PlanRevision relative to the precursor Plan.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="precursorPlan" canBeNull="true" comment="Reference to a precursor (or predecessor) Plan from which the changes are detailed in the Plan.  This may be used if there is an iterative re-planning cycle in which successive plans overlap, or where a previous Plan has been updated through re-planning.  If there is no precursor, then the Plan must be a self-standing full plan.
If the Plan is a Patch Plan, then a precursor plan must be specified.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="targetPlan" canBeNull="true" comment="Applicable only for patch plans, this is a reference to the target Plan.  This target Plan is the result of applying the patch plan to the precursor Plan and is distinct from the identity of the patch plan itself.  Patch plans are not permitted in the context of a planning request.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="information" canBeNull="false" comment="Contains header information relating to the Plan, including its originator and validity period.">
          <mal:type area="MPS" list="false" objectRef="false" name="PlanInformation"/>
        </mal:field>
        <mal:field name="isAlternate" canBeNull="false" comment="Flag indicating if the Plan has currently been released as an Operational or Alternate plan.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="status" canBeNull="false" comment="Current status of the Plan.">
          <mal:type area="MPS" list="false" objectRef="false" name="PlanStatusEnum"/>
        </mal:field>
        <mal:field name="statusInfo" canBeNull="true" comment="Supplementary information for a Plan in the Terminated state.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PlanActivationStatus" shortFormPart="510" comment="E1: PlanActivationStatus is a data structure that returns the activation status of a Plan in the context of the MPS Plan Execution Control service ActivatePlan and DeactivatePlan operations.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="plan" canBeNull="false" comment="Reference to the Plan (key and version) to which the status relates.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="status" canBeNull="false" comment="Current status of the Plan.">
          <mal:type area="MPS" list="false" objectRef="false" name="PlanStatusEnum"/>
        </mal:field>
        <mal:field name="activationInfo" canBeNull="false" comment="ActivationInfo provides customizable detailed information on the result of the activation/deactivation request for the referenced Plan. ">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="SubPlanUpdate" shortFormPart="511" comment="E1: SubPlanUpdate is a data structure that is used to report changes in status of a sub-plan during plan execution.  It is returned in the context of the MPS Plan Execution Control service monitorSubPlanExecution and getSubPlanStatus operations.
Sub-plans are not defined as objects within the MPS model.  Individual activities within a Plan may be associated with a single sub-plan via its Identifier.  The plan execution function is responsible for managing and reporting sub-plan status associated with relevant Plan Execution Control service operations, if supported.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="subPlan" canBeNull="false" comment="Identifier of the sub-plan to which the update relates.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="timestamp" canBeNull="false" comment="Time of status update.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
        <mal:field name="status" canBeNull="false" comment="Current status of the sub-plan, which may be Activated or Deactivated.">
          <mal:type area="MPS" list="false" objectRef="false" name="SubPlanStatusEnum"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="SubPlanActivationStatus" shortFormPart="513" comment="E1: SubPlanActivationStatus is a data structure that returns the activation status of a sub-plan in the context of the MPS Plan Execution Control service ActivateSubPlan and DeactivateSubPlan operations.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="plan" canBeNull="false" comment="Identifier of the sub-plan to which the status relates.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="status" canBeNull="false" comment="Current status of the sub-plan, which may be Activated or Deactivated.">
          <mal:type area="MPS" list="false" objectRef="false" name="SubPlanStatusEnum"/>
        </mal:field>
        <mal:field name="activationInfo" canBeNull="false" comment="ActivationInfo provides customizable detailed information on the result of the activation/deactivation request for the referenced sub-plan. ">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PlanQuery" shortFormPart="514" comment="E1: PlanQuery is a data structure used in the context of queryPlan operation of the MPS Plan Distribution Service.  It is used to specify search criteria for querying the available set of Plans. ">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="planID" canBeNull="true" comment="Query for Plans with the specified PlanID.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="hasPrecursor" canBeNull="true" comment="Query for Plans with or without a precursor.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="isPatchPlan" canBeNull="true" comment="Query for Plans that are or are not patch plans.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="precursorPlan" canBeNull="true" comment="Query for Plans with the specified precursor Plan.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="targetPlan" canBeNull="true" comment="Applicable only for patch plans.  Query for patch plans that have the specified target Plan.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="originator" canBeNull="true" comment="Query for Plans with the specified originator.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="productionTime" canBeNull="true" comment="Query for Plans with a production date in the specified range.">
          <mal:type area="MPS" list="false" objectRef="false" name="TimeWindow"/>
        </mal:field>
        <mal:field name="validityPeriod" canBeNull="true" comment="Query for Plans with a validity period within (overlapping with) the specified range.">
          <mal:type area="MPS" list="false" objectRef="false" name="TimeWindow"/>
        </mal:field>
        <mal:field name="isAlternate" canBeNull="true" comment="Query for Plans that are or are not Alternate plans.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="status" canBeNull="true" comment="Query for Plans that have a current status matching one of the specified list of Plan statuses.">
          <mal:type area="MPS" list="true" objectRef="false" name="PlanStatusEnum"/>
        </mal:field>
        <mal:field name="plannedEvents" canBeNull="true" comment="Query for Plans that contain EventInstances inside plannedItems whose definition matches one of the specified list of EventDefinitions.">
          <mal:type area="MPS" list="true" objectRef="true" name="EventDefinition"/>
        </mal:field>
        <mal:field name="plannedActivities" canBeNull="true" comment="Query for Plans that contain ActivityInstances inside plannedItems whose definition matches one of the specified list of ActivityDefinitions.">
          <mal:type area="MPS" list="true" objectRef="true" name="ActivityDefinition"/>
        </mal:field>
        <mal:field name="revisedEvents" canBeNull="true" comment="Query for patch plans that contain EventInstances inside their revisions whose definition matches one of the specified list of EventDefinitions.">
          <mal:type area="MPS" list="true" objectRef="true" name="EventDefinition"/>
        </mal:field>
        <mal:field name="revisedActivities" canBeNull="true" comment="Query for patch plans that contain ActivityInstances inside their revisions whose definition matches one of the specified list of ActivityDefinitions.">
          <mal:type area="MPS" list="true" objectRef="true" name="ActivityDefinition"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PartialPlan" shortFormPart="515" comment="E1: A PartialPlan is a data structure returned from the getPartialPlan operation of the Plan Distribution Service that contains a reference to the source Plan, the criteria used to select the partial plan, and the partial plan itself.  The partial plan uses the same structure as a normal Plan, with header fields matching those of the source Plan, but only containing the subset of ActivityInstances that matches the selection criteria.  Whether EventInstances and Resources are included is implementation specific, but it might be assumed that any events and resources related to the selected ActivityInstances would be included in the returned partial plan.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="sourcePlan" canBeNull="false" comment="Reference to the Plan of which the partial plan is a selected subset.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="domain" canBeNull="true" comment="Selection criterion based on the domain of contained ActivityInstances.
An ordered list representing a domain hierarchy, ‘*’ can be used to represent a wildcard at that level.">
          <mal:type area="MAL" list="true" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="subPlan" canBeNull="true" comment="Selection criterion based on the subPlan of contained ActivityInstances.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="tags" canBeNull="true" comment="Selection criterion based on tags associated with contained ActivityInstances.">
          <mal:type area="MAL" list="true" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="partialPlanStart" canBeNull="true" comment="Selection criterion indicating the start of a range of time, position, or events associated with contained ActivityInstances.">
          <mal:type area="MPS" list="false" objectRef="false" name="Trigger"/>
        </mal:field>
        <mal:field name="partialPlanEnd" canBeNull="true" comment="Selection criterion indicating the end of a range of time, position, or events associated with contained ActivityInstances.">
          <mal:type area="MPS" list="false" objectRef="false" name="Trigger"/>
        </mal:field>
        <mal:field name="partialPlan" canBeNull="false" comment="The returned partial plan.">
          <mal:type area="MPS" list="false" objectRef="false" name="Plan"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PlanFilter" shortFormPart="516" comment="E1: PlanFilter is a data structure used in the context of MPS Plan Distribution Service operations to specify a filtered set of Plans.  ">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="domain" canBeNull="true" comment="Domain of the Plan.
An ordered list representing a domain hierarchy, ‘*’ can be used to represent a wildcard at that level.">
          <mal:type area="MAL" list="true" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="planID" canBeNull="true" comment="Identity (key and version) of the Plan.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="precursorPlan" canBeNull="true" comment="Identity (key and version) of the precursor Plan.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="status" canBeNull="true" comment="Current status (enum) of the Plan.">
          <mal:type area="MPS" list="false" objectRef="false" name="PlanStatusEnum"/>
        </mal:field>
        <mal:field name="originator" canBeNull="true" comment="Originator of the Plan.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="validityPeriod" canBeNull="true" comment="Period of time with which the validity period of the Plan overlaps.">
          <mal:type area="MPS" list="false" objectRef="false" name="TimeWindow"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PartialPlanFilter" shortFormPart="517" comment="E1: PartialPlanFilter is a data structure input to the getPartialPlan operation of the Plan Distribution Service that contains a reference to the source Plan, and specifies the criteria used to select the partial plan.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="sourcePlan" canBeNull="false" comment="Reference to the Plan of which the partial plan is a selected subset.">
          <mal:type area="MPS" list="false" objectRef="true" name="Plan"/>
        </mal:field>
        <mal:field name="domain" canBeNull="true" comment="Selection criterion based on the domain of contained ActivityInstances.
An ordered list representing a domain hierarchy, ‘*’ can be used to represent a wildcard at that level.">
          <mal:type area="MAL" list="true" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="subPlan" canBeNull="true" comment="Selection criterion based on the subPlan of contained ActivityInstances.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="tags" canBeNull="true" comment="Selection criterion based on tags associated with contained ActivityInstances">
          <mal:type area="MAL" list="true" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="partialPlanStart" canBeNull="true" comment="Selection criterion indicating the start of a range of time, position, or events associated with contained ActivityInstances.  If no actual time is known for a Trigger, its predicted time may be used instead to derive the relevant range. ">
          <mal:type area="MPS" list="false" objectRef="false" name="Trigger"/>
        </mal:field>
        <mal:field name="partialPlanEnd" canBeNull="true" comment="Selection criterion indicating the end of a range of time, position, or events associated with contained ActivityInstances.  If no actual time is known for a Trigger, its predicted time may be used instead to derive the relevant range.">
          <mal:type area="MPS" list="false" objectRef="false" name="Trigger"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="FunctionDefinitionDetails" shortFormPart="701" comment="E8: FunctionDefinitionDetails is a data structure that contains static configuration data relating to custom functions: built-in Boolean functions of an MPS system, each of which has a specified Identifier and optional set of argument definitions.  This may change over time, each comprising a separate version of the definition.  FunctionDefinitions form part of the planning configuration data.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="functionID" canBeNull="false" comment="ID of the custom function.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="version" canBeNull="false" comment="Version of the FunctionDefinition.">
          <mal:type area="MAL" list="false" objectRef="false" name="UInteger"/>
        </mal:field>
        <mal:field name="description" canBeNull="false" comment="Description of the custom function.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="argDefs" canBeNull="true" comment="List of argument definitions.">
          <mal:type area="MPS" list="true" objectRef="false" name="ArgDef"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="FunctionDetails" shortFormPart="702" comment="E8: Contains the information required to invoke a defined function, including the specification of argument values.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="function" canBeNull="false" comment="ID of a specific FunctionDefinition.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="argSpecs" canBeNull="true" comment="Set of argument specifications for each argument definition contained in the referenced function definition.  These supply a value for each argument, or an expression to enable the value to be derived.">
          <mal:type area="MPS" list="true" objectRef="false" name="ArgSpec"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="NamedElement" shortFormPart="2" comment="E1: The NamedElement composite represents a pair of a MAL::Identifier and an abstract MAL::Element.  It is an extension of the MAL::NamedValue composite that adds support for non-MAL::Attribute values.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="name" canBeNull="false" comment="Name identifying the element.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="value" canBeNull="true" comment="Corresponding MAL::Element value.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="Slider" shortFormPart="3" comment="E1: Used to indicate a relative position with respect to an MPS object, such as a planning activity where 0 represents the start and 1 the end of the activity.  The slider is a real number that can represent any point between these two extremes.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="position" canBeNull="false" comment="Relative point between the start and end of an MPS object, where 0 represents the start and 1 represents the end.">
          <mal:type area="MAL" list="false" objectRef="false" name="Float"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="StateDef" shortFormPart="4" comment="E1: Status values may be represented as enumerated Integers, but the enumeration is not defined by the Recommended Standard, but in the context of planning configuration data.  StateDefs hold the definitions of the text labels associated with specific status values.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="value" canBeNull="false" comment="Enumerated value of the Status.">
          <mal:type area="MAL" list="false" objectRef="false" name="Integer"/>
        </mal:field>
        <mal:field name="state" canBeNull="false" comment="Text label associated with the enumerated value.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="TimeWindow" shortFormPart="5" comment="E1: Represents a specific period of time, specified as two Expressions of type Time defining the start and end of the TimeWindow.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="start" canBeNull="false" comment="Start time of the time window.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="end" canBeNull="false" comment="End time of the time window.  Shall not be earlier in time than the start of the time window.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="EventWindow" shortFormPart="6" comment="E1: Represents a specific period relative to two events that mark the start and end of the EventWindow.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="startEvent" canBeNull="false" comment="The start of the event window is relative to the referenced startEvent.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="startOffset" canBeNull="true" comment="The start of the event window is offset by the defined time period from the startEvent.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="endEvent" canBeNull="false" comment="The end of the event window is relative to the referenced endEvent.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="endOffset" canBeNull="true" comment="The end of the event window is offset by the defined time period from the endEvent.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="DefListEntry" shortFormPart="7" comment="E1: Used in the context of the MPS Plan Information Management service, this holds a list of definitions for a specified type of MPS service object, together with their definitions.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="definitionID" canBeNull="false" comment="Object Type: ActivityDefinition | EventDefinition | Resource | RequestDefinition.
Item Definition (key and version).">
          <mal:type area="MAL" list="false" objectRef="true" name="Element"/>
        </mal:field>
        <mal:field name="description" canBeNull="false" comment="Description of the item.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="Position" comment="E6: Abstract type that represents a unique position in three-dimensional space.  Depending on the concrete subtype used, the actual position may be derived in different manners.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
      </mal:composite>

      <mal:composite name="CartesianPosition" shortFormPart="8" comment="E6: Concrete type representing a Position in Cartesian coordinates.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Position"/>
        </mal:extends>
        <mal:field name="x" canBeNull="false" comment="Cartesian x coordinate defined in the given frame and with values of the given unit.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="y" canBeNull="false" comment="Cartesian y coordinate defined in the given frame and with values of the given unit.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="z" canBeNull="false" comment="Cartesian z coordinate defined in the given frame and with values of the given unit.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="frame" canBeNull="false" comment="Reference frame within which the position is expressed (see 4.4.2).">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="The units for the quantity of distance.
Default = ‘km’.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="SurfacePosition" shortFormPart="9" comment="E6: A SurfacePosition is typically used to specify a coordinate on the surface of a celestial body.  Optionally, an altitude above the surface may also be specified.  The reference ellipsoid used to define the surface may be mission-specific.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Position"/>
        </mal:extends>
        <mal:field name="longitude" canBeNull="false" comment="Angular coordinate.  May also represent azimuth.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="latitude" canBeNull="false" comment="Angular coordinate.  May also represent elevation.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="frame" canBeNull="false" comment="Reference frame used to determine the origin and orientation of the reference ellipsoid.  Must be a celestial body reference frame (see 4.4.2).">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="The units for the quantity of angle, in which to express the longitude and latitude.
Default = ‘deg’.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="altitude" canBeNull="true" comment="Altitude above a reference ellipsoid (negative values allowed).
Default = 0.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="altitudeUnits" canBeNull="true" comment="The units for the quantity of altitude.
Default = ‘m’.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="OrbitFilePosition" shortFormPart="10" comment="E6: An OrbitFilePosition represents a Position that is defined with respect to some Orbit Data Message (ODM) file (reference [D10]).">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Position"/>
        </mal:extends>
        <mal:field name="orbitFile" canBeNull="false" comment="Name of or reference to a file containing an ODM.">
          <mal:type area="MAL" list="false" objectRef="false" name="File"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="OrbitalPosition" shortFormPart="11" comment="E6: An OrbitalPosition represents a Position that is defined with respect to some mission-specific orbit.  The conventions used to derive the orbitNumber and orbitAngle follow from a mission-specific definition.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Position"/>
        </mal:extends>
        <mal:field name="orbitNumber" canBeNull="false" comment="Orbit number.  Depending on the relativeOrbit flag, the orbit number may be absolute (since start of mission) or relative (to the orbital repeat cycle).">
          <mal:type area="MAL" list="false" objectRef="false" name="Integer"/>
        </mal:field>
        <mal:field name="relativeOrbit" canBeNull="false" comment="Flag indicating if the orbit number is absolute or relative to the orbital repeat cycle.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="orbitAngle" canBeNull="false" comment="Angle within orbit.  Whether this angle is the mean or true anomaly and from which datum it is measured are mission specific.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="The units for the quantity of angle, in which the orbitAngle is expressed in.
Default = ‘deg’.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ObjectPosition" shortFormPart="12" comment="E6: An ObjectPosition is a Position that coincides with the position of an existing object.  The manner in which the planning system derives the value of this Position from the name of the referenced object is implementation-defined.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Position"/>
        </mal:extends>
        <mal:field name="object" canBeNull="false" comment="Name or identifier of a catalogued celestial object or a mission specific object.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PositionReference" shortFormPart="13" comment="E6: A PositionReference is a Position that is evaluated based on a given reference position.  The manner in which the Position is computed by the planning system based on this reference may be mission specific.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Position"/>
        </mal:extends>
        <mal:field name="reference" canBeNull="false" comment="Name of a mission specific position definition.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="Direction" comment="E6: Abstract type that represents a unique direction in three-dimensional space.  The actual manner in which this direction is evaluated depends on the concrete subtype used.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
      </mal:composite>

      <mal:composite name="CartesianDirection" shortFormPart="14" comment="E6: Dimensionless unit vector.  Either a direction in the base frame or in a secondary frame may be defined.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Direction"/>
        </mal:extends>
        <mal:field name="x" canBeNull="false" comment="Cartesian x coordinate defined in the given frame.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="y" canBeNull="false" comment="Cartesian y coordinate defined in the given frame.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="z" canBeNull="false" comment="Cartesian z coordinate defined in the given frame.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="frame" canBeNull="false" comment="Reference frame within which the direction is expressed (see 4.4.2).">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="SphericalDirection" shortFormPart="15" comment="E6: Typically used to define a direction in a secondary frame.  When used to specify a surface coordinate, this actually represents a {longitude, latitude} pair.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Direction"/>
        </mal:extends>
        <mal:field name="azimuth" canBeNull="false" comment="Angular coordinate.  May also represent longitude.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="elevation" canBeNull="false" comment="Angular coordinate.  May also represent latitude.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="frame" canBeNull="false" comment="Reference frame within which the direction is expressed. Must be a celestial body or spacecraft reference frame (see 4.4.2).">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="The units for the quantity of angle, in which the azimuth and elevation are expressed in.
Default = ‘deg’.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="RADecDirection" shortFormPart="16" comment="E6: Represents a Direction based on celestial angular coordinates of right ascension and declination.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Direction"/>
        </mal:extends>
        <mal:field name="ra" canBeNull="false" comment="Right Ascension: Celestial angular coordinate, measured eastward along the celestial equator.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="dec" canBeNull="false" comment="Declination: Celestial angular coordinate, north or south of the celestial equator.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="frame" canBeNull="false" comment="Reference frame within which the direction is expressed.  Must be a quasi-inertial celestial body or orbit-related frame (see 4.4.2).">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="The units for the quantity of angle, in which the ra and dec are expressed in.
Default = ‘deg’.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="NamedTargetDirection" shortFormPart="17" comment="E6: A NamedTargetDirection is a Direction that points to an existing object.  The manner in which the planning system derives the value of this Direction from the name of the referenced object is implementation-defined.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Direction"/>
        </mal:extends>
        <mal:field name="namedTarget" canBeNull="false" comment="Name or identifier of a catalogued celestial object or a mission specific object (see 4.4.3).">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="DirectionReference" shortFormPart="18" comment="E6: A DirectionReference is a Direction that may be computed following some mission specific definition.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Direction"/>
        </mal:extends>
        <mal:field name="reference" canBeNull="false" comment="Name of a mission specific direction definition.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PhysicalValue" comment="E6: PhysicalValue is an abstract base type for the specific value types defined below.  Only specific value types are used in the pointing constraint definitions below.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="value" canBeNull="false" comment="Physical value.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="Optional units.  The units for a single quantity.  The unit type depends on the specific value type.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="Angle" shortFormPart="19" comment="E6: Physical value with units of type Angle.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="PhysicalValue"/>
        </mal:extends>
      </mal:composite>

      <mal:composite name="AngularVelocity" shortFormPart="20" comment="E6: Physical value with units of type AngularVelocity.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="PhysicalValue"/>
        </mal:extends>
      </mal:composite>

      <mal:composite name="Distance" shortFormPart="21" comment="E6: Physical value with units of type Distance.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="PhysicalValue"/>
        </mal:extends>
      </mal:composite>

      <mal:composite name="ExternalExpression" shortFormPart="22" comment="E1: When the MPS data types are not sufficiently expressive, it is possible to provide an external expression that evaluates into a given data type, using the ExternalExpression data type.  These external expressions are themselves text strings in some external language.
The manner in which this expression is evaluated is implementation specific.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="type" canBeNull="false" comment="Enumeration specifying the data type of the result of the expression.">
          <mal:type area="MPS" list="false" objectRef="false" name="ArgTypeEnum"/>
        </mal:field>
        <mal:field name="expressionLanguage" canBeNull="false" comment="Defines the expression language used to specify the expression.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="expression" canBeNull="false" comment="The text of the expression.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ArgDef" shortFormPart="23" comment="E1: The definition of an argument is an ArgDef, a set of which may be contained within the definition MO object of a planning event, planning activity, or planning request.  This defines the name and data type of the argument.  Depending on the data type, the ArgDef may require additional type specific fields to support data validation.  SubTypes are identified for Numeric, String, and Status arguments.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="argName" canBeNull="false" comment="Name of the argument.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="description" canBeNull="false" comment="Extended description of the argument.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="argType" canBeNull="false" comment="Enumeration specifying the data type of the argument.">
          <mal:type area="MPS" list="false" objectRef="false" name="ArgTypeEnum"/>
        </mal:field>
        <mal:field name="argUnits" canBeNull="true" comment="The units of a single quantity, in which the argument value is expressed in.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
        <mal:field name="isArray" canBeNull="false" comment="If True, indicates that the argument is an array of values of type ArgTypeEnum.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="validationData" canBeNull="true" comment="Optional.  Specifies the allowed range of values for the Argument, with concrete subtypes specific to the data type of the Argument.">
          <mal:type area="MPS" list="false" objectRef="false" name="ValidationDetails"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="Argument" shortFormPart="24" comment="E1: The instance of an argument is an Argument, a set of which may be contained within the instance MO object of a planning event or planning activity or within a planning request.  This comprises the name and value of the argument, corresponding to the set of arguments defined in the ArgDef.  Argument values are represented as a MAL Element of appropriate data type.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="argName" canBeNull="false" comment="Name of the argument.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="argValues" canBeNull="false" comment="Argument value (or values if it is an array).  The MAL Element subtype(s) must match the argument type supplied in the corresponding ArgDef.">
          <mal:type area="MAL" list="true" objectRef="false" name="Element"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ArgSpec" shortFormPart="25" comment="E1: In the case of the planning activity, there is also an ArgSpec, a set of which may be contained within the ActivityDetails structure embedded within a planning request or parent planning activity definition.  The ArgSpec defines how to derive the value of an Argument when instantiating it at run-time.  ">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="argName" canBeNull="false" comment="Name of the argument.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="argSpecs" canBeNull="false" comment="Expression that can be evaluated at run-time to provide argument value(s) of appropriate data type.">
          <mal:type area="MAL" list="true" objectRef="false" name="Element"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ValidationDetails" comment="E1: Abstract type that is used to represent an allowed range of values for a given Argument or Resource.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
      </mal:composite>

      <mal:composite name="NumericRange" shortFormPart="26" comment="E1: Concrete sub-type of ValidationDetails that provides additional fields to support data validation for numeric data types.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="ValidationDetails"/>
        </mal:extends>
        <mal:field name="min" canBeNull="true" comment="Minimum value of the argument; if omitted, no minimum value is considered.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
        <mal:field name="max" canBeNull="true" comment="Maximum value of the argument; if omitted, no maximum value is considered.">
          <mal:type area="MAL" list="false" objectRef="false" name="Double"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="StringPattern" shortFormPart="27" comment="E1: Concrete sub-type of ValidationDetails that provides additional fields to support data validation for the string data type.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="ValidationDetails"/>
        </mal:extends>
        <mal:field name="maxLength" canBeNull="true" comment="Maximum length of the string (characters).  If omitted, no maximum length is enforced.">
          <mal:type area="MAL" list="false" objectRef="false" name="UInteger"/>
        </mal:field>
        <mal:field name="regex" canBeNull="true" comment="A ‘regular expression’ or sequence of characters defining a character pattern that the string value must match.  If omitted, all character sequences are permitted.
The choice of ‘regular expression’ specification to follow is implementation-specific.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="StatusValues" shortFormPart="28" comment="E1: Concrete sub-type of ValidationDetails that provides additional fields to support data validation and interpretation for integer type arguments that are effectively enumerated Statuses.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="ValidationDetails"/>
        </mal:extends>
        <mal:field name="allowedValues" canBeNull="false" comment="Set of allowed State definitions (see 0), comprising the enumerated value and an associated text label.">
          <mal:type area="MPS" list="true" objectRef="false" name="StateDef"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="Constraint" comment="E1: Abstract type representing a planning constraint, a Boolean condition which restricts the planning of planning activities.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="negate" canBeNull="true" comment="Specifies whether the result of combining the Constraints is to be inverted (NOT function).
Default = False.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ConstraintNode" shortFormPart="29" comment="E1: Multiple planning constraints can be combined using a ConstraintNode.  The ConstraintNode specifies the logical operation (AND or OR) to be used when combining a set of constraints together.  As the ConstraintNode is itself defined as a sub-type of Constraint, it is possible to construct a tree of ConstraintNodes using different logical operators.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Constraint"/>
        </mal:extends>
        <mal:field name="operator" canBeNull="true" comment="Enumeration specifying the logic for combining multiple Boolean conditions together.  One of {AND, OR}.
Default = AND.">
          <mal:type area="MPS" list="false" objectRef="false" name="LogicOpEnum"/>
        </mal:field>
        <mal:field name="constraints" canBeNull="false" comment="The set of Constraints to be combined.  Must contain at least one element.">
          <mal:type area="MPS" list="true" objectRef="false" name="Constraint"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ConstraintExpression" shortFormPart="31" comment="E1: All types of constraint can be considered conditions that are either met or not met when a planning activity is placed in a Plan.  They can therefore be specified as a potentially complex Boolean expression that combines references to the arguments and fields of objects in the MPS information model using operators of various types (arithmetic, comparative, logical, string, temporal, and geometric).  The expression must evaluate to TRUE for the constraint to be met.
As introduced in 1.2, this Recommended Standard does not define a full expression language capable of supporting such complex Boolean expressions.  It does, however, support the use of externally defined expression languages.  The ConstraintExpression type allows for the use of such an expression language to define any type of constraint, providing communicating entities all have the capability to evaluate that expression language.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Constraint"/>
        </mal:extends>
        <mal:field name="constraint" canBeNull="false" comment="Potentially complex conditional expression that must evaluate to TRUE for the constraint to be met.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="TimeConstraint" shortFormPart="32" comment="E2: The time at which a planning activity must be planned.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Constraint"/>
        </mal:extends>
        <mal:field name="time" canBeNull="false" comment="The time at which the planning activity must be planned.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="timeRef" canBeNull="false" comment="The point in the duration of the planning activity that is time constrained.
0:  the start of the planning activity.
1:  the end of the planning activity.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="TimeWindowConstraint" shortFormPart="33" comment="E2: A time window within which the planning activity is to be planned.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Constraint"/>
        </mal:extends>
        <mal:field name="startRef" canBeNull="true" comment="The point in the duration of the activity that is constrained to be after the start time of the time window.  Although typically the start of the activity (0), this can be any point up to the end of the activity (1).
Default is the start of the planning activity.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="endRef" canBeNull="true" comment="The point in the duration of the activity that is constrained to be before the end time of the time window.  Although typically the end of the activity (1), this can be any point up to the start of the activity (0).
Default is the end of the planning activity.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="timeWindows" canBeNull="false" comment="The [set of] TimeWindows within which the activity must be placed on the Plan.">
          <mal:type area="MPS" list="true" objectRef="false" name="TimeWindow"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="DurationConstraint" shortFormPart="34" comment="E2: A DurationConstraint restricts the duration of a planning activity within the plan.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Constraint"/>
        </mal:extends>
        <mal:field name="minDuration" canBeNull="true" comment="Specifies the minimum duration of the planning activity.
If omitted, a value of 0 is used.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="maxDuration" canBeNull="true" comment="Specifies the maximum duration of the planning activity.
If omitted, the maximum representable MAL::Duration value is assumed.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ArgumentConstraint" shortFormPart="35" comment="E5: An argument constraint may be associated with a planning activity to restrict when it can be planned, based on the value of an argument of the planning activity itself or a related planning activity or event.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Constraint"/>
        </mal:extends>
        <mal:field name="objectRef" canBeNull="true" comment="Object Type: ActivityDefinition | EventDefinition
Specifies the definition (class) of the planning activity or planning event whose argument is to be referenced.  If omitted the activity containing the constraint is assumed.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="argName" canBeNull="false" comment="Identifies the specific argument of the referenced Object whose value is to be compared">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="comparator" canBeNull="false" comment="Comparison operator, which may be one of:
=, !=, &gt;, &gt;=, &lt;, &lt;=, contains, icontains
The contains operator only applies to strings and may be case sensitive or insensitive.">
          <mal:type area="MPS" list="false" objectRef="false" name="ExpressionOperatorEnum"/>
        </mal:field>
        <mal:field name="value" canBeNull="false" comment="Value (of same type as the referenced Argument) to be compared against.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ResourceConstraint" comment="E5: ResourceConstraint is an abstract type that represents a constraint expressed in terms of the value of a given Resource.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Constraint"/>
        </mal:extends>
        <mal:field name="resourceRef" canBeNull="false" comment="Identifies the planning resource that is constrained for the duration of the planning activity.">
          <mal:type area="MPS" list="false" objectRef="true" name="Resource"/>
        </mal:field>
        <mal:field name="comparator" canBeNull="false" comment="Comparison operator, which may be one of:
=, !=, &gt;, &gt;=, &lt;, &lt;=, contains, icontains.
The contains operator only applies to strings and may be case sensitive or insensitive.">
          <mal:type area="MPS" list="false" objectRef="false" name="ExpressionOperatorEnum"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="SimpleResourceConstraint" shortFormPart="37" comment="E5: The simple resource constraint must be satisfied for the duration of the referenced planning activity.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="ResourceConstraint"/>
        </mal:extends>
        <mal:field name="value" canBeNull="false" comment="Value (of same type as the referenced Resource) to be compared against.">
          <mal:type area="MAL" list="false" objectRef="false" name="Attribute"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ComplexResourceConstraint" shortFormPart="38" comment="E5: In the [simple] resource constraint, the value of the referenced planning resource is constrained against a single value for the entire duration of the referenced planning activity.
With the complex resource constraint, the period over which the constraint applies can be customized relative to the referenced planning activity; and the value against which the referenced planning resource is constrained can be specified as a relative resource profile which evolves over time.
The fields of the complex resource constraint extend or modify those of the [simple] resource constraint as given below.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="ResourceConstraint"/>
        </mal:extends>
        <mal:field name="startRef" canBeNull="true" comment="Identifies the point in the duration of the referenced planning activity to which the start of the constraint period relates.
Default is the start of the planning activity.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="endRef" canBeNull="true" comment="Identifies the point in the duration of the referenced planning activity to which the end of the constraint period relates.
Default is the end of the planning activity.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="startOffset" canBeNull="true" comment="Offset from startRef that specifies the start of the constraint period.  A positive offset implies a shift later in time.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="endOffset" canBeNull="true" comment="Offset from endRef that specifies the end of the constraint period.  A positive offset implies a shift later in time.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="valueProfile" canBeNull="false" comment="ResourceProfile specifying an evolving value over time against which the value of the planning resource is to be compared (see 4.5.4.4).">
          <mal:type area="MPS" list="false" objectRef="false" name="RelativeResourceProfile"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="GeometricConstraint" comment="E7: Geometric constraints restrict the planning of the planning activity by imposing a geometric condition that must be valid during some constraint period.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Constraint"/>
        </mal:extends>
        <mal:field name="startRef" canBeNull="true" comment="Identifies the point in the duration of the referenced planning activity to which the start of the constraint period relates.
Default is the start of the planning activity.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="endRef" canBeNull="true" comment="Identifies the point in the duration of the referenced planning activity to which the end of the constraint period relates.
Default is the end of the planning activity.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="startOffset" canBeNull="true" comment="Offset from startRef that specifies the start of the constraint period.  A positive offset implies a shift later in time.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="endOffset" canBeNull="true" comment="Offset from endRef that specifies the end of the constraint period.  A positive offset implies a shift later in time.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PositionConstraint" shortFormPart="39" comment="E7: Sub-type of geometric constraint expressed in terms of a specified Position and a tolerance.  The tolerance is defined as a sphere around the specified position, expressed as a distance or angle.  It should be noted that the position itself can be expressed using any of the concrete position sub-types, including orbital and surface positions.  The use of a constraint expressed by OrbitalPosition is particularly relevant for Earth observation satellites with a repetitive ground track and on-board position-based planning function.  The position can also specified as an expression.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="GeometricConstraint"/>
        </mal:extends>
        <mal:field name="position" canBeNull="false" comment="Specifies the required position expressed using any concrete position type.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="tolerance" canBeNull="false" comment="Specifies the maximum distance or angle from the required position that satisfies the constraint, effectively defining a sphere around the required position.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="Optional.  The tolerance units name, either for the quantity of distance or the quantity of angle.
Default = ‘km’, but ‘deg’ is more relevant for an OrbitalPosition.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="EllipsoidalPositionConstraint" shortFormPart="40" comment="E7: Geometric constraint that specifies a Position with a tolerance given in terms of a frame-aligned ellipsoid.  The frame within which this tolerance ellipsoid is expressed may be different from the frame in which the required position is expressed.  ">
        <mal:extends>
          <mal:type area="MPS" list="false" name="GeometricConstraint"/>
        </mal:extends>
        <mal:field name="position" canBeNull="false" comment="Specifies the required position expressed using any concrete position type.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="x" canBeNull="false" comment="Length of the ellipsoid axis that is aligned with the x axis of the specified frame.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="y" canBeNull="false" comment="Length of the ellipsoid axis that is aligned with the y axis of the specified frame.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="z" canBeNull="false" comment="Length of the ellipsoid axis that is aligned with the z axis of the specified frame.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="frame" canBeNull="false" comment="Reference frame with which the axes of the tolerance ellipsoid are aligned (see 4.4.2).">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="Optional.  The tolerance units name, either for the quantity of distance or the quantity of angle.
Default = ‘km’, but ‘deg’ is more relevant for an OrbitalPosition.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PointingConstraint" shortFormPart="41" comment="E7: Pointing constraints impose a restriction on a planning activity appearing in a Plan, based on the pointing direction of a physical object, such as a spacecraft or instrument.
As with the Direction data types (see 4.6.3.3), pointing constraints are consistent with the pointing templates defined for use within CCSDS Navigation data format Recommended Standards, and specifically the Pointing Request Message (PRM) (reference [10]).  PointingConstraint is a concrete sub-type of GeometricConstraint that includes fields common to all pointing templates.  The pointing template itself is then identified as a field and any additional arguments applicable to the template are provided as a list of name-value pairs.
NOTE	–	Pointing templates are common, generic templates that describe pointing modes that may be followed by spacecraft.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="GeometricConstraint"/>
        </mal:extends>
        <mal:field name="pointingFrame" canBeNull="true" comment="Optional.  Reference frame to which the pointing constraint applies (see 4.4.2).
Default frame is the spacecraft frame or any other mission specific default frame.">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="boresight" canBeNull="false" comment="Direction in any spacecraft frame.">
          <mal:type area="MPS" list="false" objectRef="false" name="Direction"/>
        </mal:field>
        <mal:field name="boresightMargin" canBeNull="true" comment="Defines an optional cone region around the boresight, allowing a margin for application of the pointing constraint.
Default = 0.0.">
          <mal:type area="MPS" list="false" objectRef="false" name="Angle"/>
        </mal:field>
        <mal:field name="phaseAngleMargin" canBeNull="true" comment="Defines an optional rotation around the boresight, w.r.t. the default phase angle, allowing a margin for application of the pointing constraint.
Default = 0.0.">
          <mal:type area="MPS" list="false" objectRef="false" name="Angle"/>
        </mal:field>
        <mal:field name="unconstrainedPhaseAngle" canBeNull="true" comment="If TRUE no constraint will apply to the phaseAngle.  The phaseAngleMargin field will be ignored in this case.
Default = FALSE.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="pointingTemplate" canBeNull="false" comment="One of the pointing templates defined in the PRM or a mission specific pointing template (see 4.4.4).">
          <mal:type area="MAL" list="false" objectRef="false" name="Identifier"/>
        </mal:field>
        <mal:field name="pointingArguments" canBeNull="true" comment="The argument list is consistent with the referenced template by name.">
          <mal:type area="MPS" list="true" objectRef="false" name="NamedElement"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="RevolutionConstraint" shortFormPart="42" comment="E7: Specifies a range of revolution angles for a rotating spacecraft.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="GeometricConstraint"/>
        </mal:extends>
        <mal:field name="revolutionAngle" canBeNull="false" comment="Angle of revolution.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="tolerance" canBeNull="false" comment="Tolerance in the angle of revolution.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="Optional.  The units for the quantity of angle, in which the revolutionAngle and tolerance are expressed in.
Default = ‘deg’.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="DistanceConstraint" shortFormPart="43" comment="E7: Specifies a range of distances between two physical objects (the observer and the target).">
        <mal:extends>
          <mal:type area="MPS" list="false" name="GeometricConstraint"/>
        </mal:extends>
        <mal:field name="observer" canBeNull="false" comment="Position of the observer [Object1].">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="target" canBeNull="false" comment="Position of the target [Object2].">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="minDistance" canBeNull="false" comment="Minimum distance between observer and target.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="maxDistance" canBeNull="false" comment="Maximum distance between observer and target.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="Optional.  The units for the quantity of distance.
Default = ‘km’.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="AngleConstraint" shortFormPart="44" comment="E7: Specifies a range of values for the angle subtended between three physical objects.  ">
        <mal:extends>
          <mal:type area="MPS" list="false" name="GeometricConstraint"/>
        </mal:extends>
        <mal:field name="centreObject" canBeNull="false" comment="Position of the centre object.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="targetObject1" canBeNull="false" comment="Position of target object 1.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="targetObject2" canBeNull="false" comment="Position of target object 2.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="minAngle" canBeNull="false" comment="Minimum angle subtended at the centre object by target objects 1 and 2.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="maxAngle" canBeNull="false" comment="Maximum angle subtended at the centre object by target objects 1 and 2.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="Optional.  The units for the quantity of angle, in which the minAngle and maxAngle are expressed in.
Default = ‘deg’.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="SequentialConstraint" shortFormPart="45" comment="E2: Sequential constraints impose a restriction on the order of planning activities in a Plan with respect to other planning activities and planning events.
Two objects are identified: the parent activity and its opponent.  The parent activity is the activity for which the constraint is defined.  The opponent may be either a planning activity or a planning event and must be placed in the Plan relative to the parent activity.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Constraint"/>
        </mal:extends>
        <mal:field name="opponent" canBeNull="false" comment="Object Type: ActivityDefinition | EventDefinition
Specifies the definition (class) of the opponent planning activity or planning event.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="parentRef" canBeNull="true" comment="Point on the parent activity that must be followed by the opponent.
Default = 1.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="opponentRef" canBeNull="true" comment="Point on the opponent that must follow the parent activity.
Default = 0.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="minOffset" canBeNull="true" comment="Minimum offset between the specified points on the parent activity and the opponent.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="maxOffset" canBeNull="true" comment="Maximum offset between the specified points on the parent activity and the opponent.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="SeparationConstraint" shortFormPart="46" comment="E2: A separation constraint specifies that the parent planning activity (the activity for which the constraint is defined) must be separate in time from another planning activity or planning event, the opponent.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Constraint"/>
        </mal:extends>
        <mal:field name="opponent" canBeNull="false" comment="Object Type: ActivityDefinition | EventDefinition
Specifies the definition (class) of the opponent planning activity or planning event.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="startRef" canBeNull="true" comment="Identifies the point in the duration of the parent activity with respect to which to place the start of its constraint window.
Default = 0.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="startOffset" canBeNull="true" comment="Offset with respect to startRef of the start of the parent activity constraint window.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="endRef" canBeNull="true" comment="Identifies the point in the duration of the parent activity with respect to which to place the end of its constraint window.
Default = 1.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="endOffset" canBeNull="true" comment="Offset with respect to endRef of the end of the parent activity constraint window.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="opponentStartRef" canBeNull="true" comment="Identifies the point in the duration of the opponent with respect to which to place the start of its constraint window.
Default = 0.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="opponentStartOffset" canBeNull="true" comment="Offset with respect to opponentStartRef of the start of the opponent constraint window.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="opponentEndRef" canBeNull="true" comment="Identifies the point in the duration of the opponent with respect to which to place the end of its constraint window.
Default = 1.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="opponentEndOffset" canBeNull="true" comment="Offset with respect to opponentEndRef of the end of the opponent constraint window.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="FunctionConstraint" shortFormPart="47" comment="E8: Function constraints make use of an external custom function to determine whether or not a constraint is satisfied.  
As for complex resource constraints, the period over which the function constraint applies is specified relative to the referenced planning activity.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Constraint"/>
        </mal:extends>
        <mal:field name="startRef" canBeNull="true" comment="Identifies the point in the duration of the referenced planning activity to which the start of the constraint period relates.
Default is the start of the planning activity.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="endRef" canBeNull="true" comment="Identifies the point in the duration of the referenced planning activity to which the end of the constraint period relates.
Default is the end of the planning activity.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="startOffset" canBeNull="true" comment="Offset from startRef that specifies the start of the constraint period.  A positive offset implies a shift later in time.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="endOffset" canBeNull="true" comment="Offset from endRef that specifies the end of the constraint period.  A positive offset implies a shift later in time.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="function" canBeNull="false" comment="Specifies the Function to be applied and its set of input arguments.">
          <mal:type area="MPS" list="false" objectRef="false" name="FunctionDetails"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="Effect" comment="E5: An Effect is an abstract type that may be used to represent the impact that executing a planning activity will have on a planning resource.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="resourceRef" canBeNull="false" comment="Identifies the planning resource that is constrained for the duration of the planning activity.">
          <mal:type area="MPS" list="false" objectRef="true" name="Resource"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="SimpleEffect" shortFormPart="48" comment="E5: A simple effect applies the defined operation on the specified planning resource at the time relative to the planning activity defined by timeRef+timeOffset.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Effect"/>
        </mal:extends>
        <mal:field name="timeRef" canBeNull="false" comment="The point in the duration of the planning activity to which the time of the Effect is relative.
0:  the start of the planning activity
1:  the end of the planning activity">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="timeOffset" canBeNull="true" comment="Offset from timeRef that specifies the time at which the Effect is to be applied.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="operator" canBeNull="false" comment="Operation to be performed on the planning resource.  One of: SET, INCREASE, DECREASE.
Increase and decrease are only applicable to numeric data types.">
          <mal:type area="MPS" list="false" objectRef="false" name="EffectOperationEnum"/>
        </mal:field>
        <mal:field name="value" canBeNull="false" comment="The value that the planning resource is to be set to if the Effect operator is SET; or to be increased/decreased by if it is INCREASE or DECREASE.">
          <mal:type area="MAL" list="false" objectRef="false" name="Attribute"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="ComplexEffect" shortFormPart="50" comment="E5: In the simple effect, the value of the impacted planning resource is set to the specified value at a single point in time.
With the complex effect, the value of the impacted planning resource can be evolved over a specified time period in accordance with a defined RelativeResourceProfile.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Effect"/>
        </mal:extends>
        <mal:field name="startRef" canBeNull="true" comment="Identifies the point in the duration of the referenced planning activity to which the start of the effect period relates.
Default is the start of the planning activity.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="endRef" canBeNull="true" comment="Identifies the point in the duration of the referenced planning activity to which the end of the effect period relates.
Default is the end of the planning activity.">
          <mal:type area="MPS" list="false" objectRef="false" name="Slider"/>
        </mal:field>
        <mal:field name="startOffset" canBeNull="true" comment="Offset from startRef that specifies the start of the effect period.  A positive offset implies a shift later in time.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="endOffset" canBeNull="true" comment="Offset from endRef that specifies the end of the effect period.  A positive offset implies a shift later in time.
Default is no offset.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="operator" canBeNull="false" comment="Operation to be performed on the planning resource.  One of: SET, INCREASE, DECREASE.
Increase and decrease are only applicable to numeric data types.">
          <mal:type area="MPS" list="false" objectRef="false" name="EffectOperationEnum"/>
        </mal:field>
        <mal:field name="value" canBeNull="false" comment="Resource profile specifying an evolving value to which the value of the planning resource is to be set if the Effect operator is SET; or to be increased/decreased by if it is INCREASE or DECREASE (see 4.5.4.4).">
          <mal:type area="MPS" list="false" objectRef="false" name="RelativeResourceProfile"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="Trigger" comment="E1: All sub-classes of Trigger include the time at which they are predicted to occur (in advance of execution); and, where applicable, the time at which they actually occurred (post execution).">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="time" canBeNull="false" comment="Predicted or actual time of Trigger.  The predicted time may evolve during the planning process up to the time of execution.  The actual time is only available post execution, and hence can only be provided by a plan execution function.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="TimeTrigger" shortFormPart="51" comment="E1: Sub-type of Trigger based on time.  The trigger time is the specified constraint, and will usually match the predicted time on the base class during the planning process, but the actual time could still be slightly different post-execution.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Trigger"/>
        </mal:extends>
        <mal:field name="triggerTime" canBeNull="false" comment="Planned time of Trigger.">
          <mal:type area="MAL" list="false" objectRef="false" name="Time"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PositionTrigger" shortFormPart="52" comment="E6: Sub-type of Trigger based on position.  Depending on the coordinate type of position used, a margin may be specified in terms of distance from the specified position.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Trigger"/>
        </mal:extends>
        <mal:field name="triggerPosition" canBeNull="false" comment="Planned position of Trigger.">
          <mal:type area="MPS" list="false" objectRef="false" name="Position"/>
        </mal:field>
        <mal:field name="distanceMargin" canBeNull="true" comment="Defines a sphere around the trigger position within which a position is considered to meet the trigger condition.">
          <mal:type area="MPS" list="false" objectRef="false" name="Distance"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="DirectionTrigger" shortFormPart="53" comment="E6: Sub-type of Trigger based on pointing.  Depending on the coordinate type of direction used, a margin may be specified in terms of angle from the specified direction.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Trigger"/>
        </mal:extends>
        <mal:field name="triggerDirection" canBeNull="false" comment="Planned direction of Trigger.">
          <mal:type area="MPS" list="false" objectRef="false" name="Direction"/>
        </mal:field>
        <mal:field name="angleMargin" canBeNull="true" comment="Defines a circle around the trigger direction within which a direction is considered to meet the trigger condition.">
          <mal:type area="MPS" list="false" objectRef="false" name="Angle"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="AngleTrigger" shortFormPart="54" comment="E6: Sub-type of Trigger based on the angle subtended between three physical objects.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Trigger"/>
        </mal:extends>
        <mal:field name="centreObject" canBeNull="false" comment="Position of the centre object.  The trigger angle is that subtended at the centre object by target objects 1 and 2.">
          <mal:type area="MPS" list="false" objectRef="false" name="Position"/>
        </mal:field>
        <mal:field name="targetObject1" canBeNull="false" comment="Position of target object 1.">
          <mal:type area="MPS" list="false" objectRef="false" name="Position"/>
        </mal:field>
        <mal:field name="targetObject2" canBeNull="false" comment="Position of target object 2.">
          <mal:type area="MPS" list="false" objectRef="false" name="Position"/>
        </mal:field>
        <mal:field name="minAngle" canBeNull="false" comment="Minimum angle subtended at the centre object by target objects 1 and 2.">
          <mal:type area="MPS" list="false" objectRef="false" name="Angle"/>
        </mal:field>
        <mal:field name="maxAngle" canBeNull="false" comment="Maximum angle subtended at the centre object by target objects 1 and 2.">
          <mal:type area="MPS" list="false" objectRef="false" name="Angle"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="EventTrigger" shortFormPart="55" comment="E1: Sub-type of Trigger based on planning event.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Trigger"/>
        </mal:extends>
        <mal:field name="triggerEvent" canBeNull="false" comment="Reference to an EventInstance">
          <mal:type area="MPS" list="false" objectRef="true" name="EventInstance"/>
        </mal:field>
        <mal:field name="timeOffset" canBeNull="false" comment="Time offset from the EventInstance">
          <mal:type area="MAL" list="false" objectRef="false" name="Duration"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="Repetition" comment="E1: A repetition is used to specify the repeated instantiation of a [set of] planning activities.  Multiple sub-types of Repetition are defined to support the specification of repeat cycles by different criteria.  It can be used in the context of a planning request to specify a standing order for repeated execution of the [set of] planning activities.
In the context of an ActivityNode embedded within a planning request (see 4.5.2.3), it is possible to nest one Repetition inside another, enabling the specification of complex repetitive sequences of activities.">
        <mal:extends>
          <mal:type area="MAL" list="false" name="Composite"/>
        </mal:extends>
        <mal:field name="count" canBeNull="true" comment="Maximum number of repeat cycles/instances [optional].
If not specified there is no limit to the number of repetitions.">
          <mal:type area="MAL" list="false" objectRef="false" name="Integer"/>
        </mal:field>
        <mal:field name="timeWindow" canBeNull="true" comment="Time period over which the repetition is applicable [optional].
If not specified repetition continues indefinitely.">
          <mal:type area="MPS" list="false" objectRef="false" name="TimeWindow"/>
        </mal:field>
        <mal:field name="separationType" canBeNull="false" comment="Specifies whether the repetition interval is Relative to the previous occurrence, or Absolute for all occurrences.">
          <mal:type area="MPS" list="false" objectRef="false" name="SeparationTypeEnum"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="PositionRepetition" shortFormPart="57" comment="E6: A sub-type of Repetition that starts at a given Position and repeats based on separation from each subsequent occurrence.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Repetition"/>
        </mal:extends>
        <mal:field name="initialPosition" canBeNull="false" comment="Nominal position of first occurrence.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="repetitionDirection" canBeNull="false" comment="Direction of repetition.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="separation" canBeNull="false" comment="The required Distance between occurrences.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="tolerance" canBeNull="false" comment="The allowed tolerance (+/-) in the required distance between occurrences, the interpretation of which is dependent on the separationType.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="Optional.  The units for the quantity of distance, in which the separation and tolerance are expressed in.
Default = ‘km’.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="OrbitRepetition" shortFormPart="58" comment="E6: A sub-type of Repetition based on the orbital cycle.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Repetition"/>
        </mal:extends>
        <mal:field name="orbitNumber" canBeNull="false" comment="Orbit number for the first occurrence.  Depending on the relativeOrbit flag, the orbit number may be absolute (since start of mission) or relative (to the orbital repeat cycle).
The datum with respect to which the orbit number is counted is mission-specific.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="relativeOrbit" canBeNull="false" comment="Flag indicating if the orbit number is absolute or relative to the orbital repeat cycle.">
          <mal:type area="MAL" list="false" objectRef="false" name="Boolean"/>
        </mal:field>
        <mal:field name="orbitSeparation" canBeNull="false" comment="The required number of orbits separation between occurrences.  If orbitNumber is Relative and the required repetition is once per repeat cycle, this is the number of orbits in the repeat cycle, but the value 0 may also be used.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="angleSeparation" canBeNull="false" comment="The required angular separation between occurrences.  This allows for multiple repetitions within an orbit.  The value 0 indicates only one occurrence within the orbit.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="orbitAngle" canBeNull="false" comment="The required position of the first occurrence within the orbit expressed as an angle.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="tolerance" canBeNull="false" comment="The allowed tolerance (+/-) in the required orbital angle.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="Optional.  The units for the quantity of angle, in which the orbitAngle, angularSeparation, and tolerance are expressed in.
Default = ‘deg’.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="DirectionRepetition" shortFormPart="59" comment="E6: A sub-type of Repetition based on direction, which supports the specification of astronomical surveys.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Repetition"/>
        </mal:extends>
        <mal:field name="initialDirection" canBeNull="false" comment="Nominal direction of first occurrence.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="targetDirection" canBeNull="false" comment="Specifies the direction of repetition as line connecting the initial and target directions.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="separation" canBeNull="false" comment="The required angle between occurrences.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="tolerance" canBeNull="false" comment="The allowed tolerance (+/-) in the required angle between occurrences, the interpretation of which is dependent on the separationType.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="Optional.  The units for the quantity of angle, in which the separation and tolerance are expressed in.
Default = ‘deg’.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="RevolutionRepetition" shortFormPart="60" comment="E6: A sub-type of Repetition based on the revolutions of a rotating spacecraft or instrument.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Repetition"/>
        </mal:extends>
        <mal:field name="revsSeparation" canBeNull="false" comment="The required number of revolutions between occurrences.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="revsTolerance" canBeNull="false" comment="The allowed tolerance (+/-) in the required number of revolutions between occurrences, the interpretation of which is dependent on the separationType.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="revAngle" canBeNull="false" comment="Specifies the angle within a revolution.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="Optional.  The units for the quantity of angle, in which the revAngle is expressed in.
Default = ‘deg’.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="TemporalRepetition" shortFormPart="61" comment="E1: A sub-type of Repetition based on time.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Repetition"/>
        </mal:extends>
        <mal:field name="initialTime" canBeNull="false" comment="Nominal time of first occurrence.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="separation" canBeNull="false" comment="The required time interval between occurrences.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="tolerance" canBeNull="false" comment="The allowed tolerance (+/-) in the required time between occurrences, the interpretation of which is dependent on the separationType.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="AngleRepetition" shortFormPart="62" comment="E6: A sub-type of Repetition based on the angle subtended between three physical objects.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Repetition"/>
        </mal:extends>
        <mal:field name="centreObject" canBeNull="false" comment="Position of the centre object.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="targetObject1" canBeNull="false" comment="Position of target object 1.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="targetObject2" canBeNull="false" comment="Position of target object 2.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="initialAngle" canBeNull="false" comment="Initial angle subtended at the centre object by target objects 1 and 2.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="separation" canBeNull="false" comment="The required angle between occurrences.
If this is zero, this implies that repetition is between multiple occurrences of the initialAngle.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="tolerance" canBeNull="false" comment="The allowed tolerance (+/-) in the required angle between occurrences, the interpretation of which is dependent on the separationType.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="units" canBeNull="true" comment="Optional.  The units for the quantity of angle, in which the initialAngle, separation and tolerance are expressed in.
Default = ‘deg’.">
          <mal:type area="MAL" list="false" objectRef="false" name="String"/>
        </mal:field>
      </mal:composite>

      <mal:composite name="EventRepetition" shortFormPart="63" comment="E1: A sub-type of Repetition based on planning events.">
        <mal:extends>
          <mal:type area="MPS" list="false" name="Repetition"/>
        </mal:extends>
        <mal:field name="eventRef" canBeNull="false" comment="Reference to an EventDefinition (type of event).">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="separation" canBeNull="false" comment="Number of occurrences of the planning event required between occurrences of the planning activity.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
        <mal:field name="tolerance" canBeNull="false" comment="The allowed tolerance (+/-) in the number of occurrences of the planning event between occurrences of the planning activity, the interpretation of which is dependent on the separationType.">
          <mal:type area="MAL" list="false" objectRef="false" name="Element"/>
        </mal:field>
      </mal:composite>

      <mal:enumeration name="ActivityStatusEnum" shortFormPart="103" comment="E1: An ActivityStatusEnum represents the set of states possible for an ActivityInstance.">
        <mal:item nvalue="1" value="PLANNED" comment="The Activity Instance has been included in the Plan."/>
        <mal:item nvalue="2" value="ACTIVATED" comment="The Plan including the Activity Instance has been Activated within the plan execution function."/>
        <mal:item nvalue="3" value="EXECUTING" comment="Execution of the Activity Instance has been initiated."/>
        <mal:item nvalue="4" value="SUSPENDED" comment="Execution of the Activity Instance has been suspended."/>
        <mal:item nvalue="5" value="TERMINATED" comment="Execution of the Activity Instance has been terminated (further information is provided in statusInfo)."/>
      </mal:enumeration>

      <mal:enumeration name="EventStatusEnum" shortFormPart="203" comment="E1: The EventStatusEnum represents the status of a given EventInstance.">
        <mal:item nvalue="1" value="GROUP" comment="The EventInstance is a group event."/>
        <mal:item nvalue="2" value="PLANNED" comment="The EventInstance has been included in the Plan ."/>
        <mal:item nvalue="3" value="ACTIVATED" comment="The Plan including the EventInstance has been Activated within the plan execution function."/>
        <mal:item nvalue="4" value="TERMINATED" comment="The EventInstance has reached a terminal status (further information is provided in statusInfo)."/>
      </mal:enumeration>

      <mal:enumeration name="PredictabilityEnum" shortFormPart="204" comment="E1: The PredictabilityEnum enumeration is used to indicate whether a given Event is predictable or can occur at any time.">
        <mal:item nvalue="1" value="PREDICTED" comment="Events that are predictable either by time or position can have specific instances included in a Plan."/>
        <mal:item nvalue="2" value="POTENTIAL" comment="Potential events are those that may occur during the execution of a Plan, but the specific time or position is not predicted."/>
      </mal:enumeration>

      <mal:enumeration name="InterpolationTypeEnum" shortFormPart="305" comment="E4: The InterpolationTypeEnum describes the set of supported interpolation types for a given operation.">
        <mal:item nvalue="1" value="STEP" comment="No interpolation:  resource values remain unchanged between defined points."/>
        <mal:item nvalue="2" value="LINEAR" comment="Linear interpolation: resource values follow a straight line between defined points."/>
        <mal:item nvalue="3" value="POLYNOMIAL" comment="Polynomial interpolation:  resource values follow a curve interpolating the defined points."/>
      </mal:enumeration>

      <mal:enumeration name="RequestStatusEnum" shortFormPart="403" comment="E1: The RequestStatusEnum enumeration represents the different statuses in which a planning request may be found.">
        <mal:item nvalue="1" value="REQUESTED" comment="The planning request has been submitted to the planning function."/>
        <mal:item nvalue="2" value="ACCEPTED" comment="The planning request has been accepted by the planning function."/>
        <mal:item nvalue="3" value="REJECTED" comment="The planning request has been rejected by the planning function."/>
        <mal:item nvalue="4" value="CANCELLED" comment="The planning request has been cancelled by the user."/>
        <mal:item nvalue="5" value="PLANNED" comment="The planning request has been incorporated into a Plan (see outputPlanRefs)."/>
        <mal:item nvalue="6" value="PROCESSING" comment="The corresponding Plan has been activated within plan execution."/>
        <mal:item nvalue="7" value="PROCESSED" comment="Execution of the all constituent activities of the planning request have terminated.  Awaiting confirmation of the status of the planning request. "/>
        <mal:item nvalue="8" value="TERMINATED" comment="The planning request has completed, either successfully or with a failure condition (further information is provided in statusInfo)."/>
      </mal:enumeration>

      <mal:enumeration name="PlanStatusEnum" shortFormPart="502" comment="E1: PlanStatusEnum represents the status of a given Plan object. ">
        <mal:item nvalue="1" value="DRAFT" comment="The Plan has been saved by the planning function."/>
        <mal:item nvalue="2" value="RELEASED" comment="The Plan has been released for operational use by the planning function."/>
        <mal:item nvalue="3" value="SUBMITTED" comment="The Plan has been submitted to the plan execution function and is available for use, but will not execute until activated."/>
        <mal:item nvalue="4" value="ACTIVATED" comment="The Plan has been activated by the plan execution function."/>
        <mal:item nvalue="5" value="TERMINATED" comment="The Plan has reached a terminal state, as detailed in the statusInfo.  This includes the following cases:
- Completed (nominal);
- Superseded by a successor Plan;
- Revoked by a User;
- Cancelled (deactivated after start of execution);
- Expired (reached the end of its validity period without being activated)."/>
      </mal:enumeration>

      <mal:enumeration name="RevisionStatusEnum" shortFormPart="507" comment="E3: The RevisionStatusEnum represents the type of changes that were made to an item in a given revision.">
        <mal:item nvalue="1" value="NEW" comment="The item is new in this revision of the Plan."/>
        <mal:item nvalue="2" value="MODIFIED" comment="The item has been modified in this revision of the Plan."/>
        <mal:item nvalue="3" value="DELETED" comment="The item has been deleted in this revision of the Plan."/>
        <mal:item nvalue="4" value="UNDEFINED" comment="The item is unchanged in this revision of the Plan, or its revision status is undefined."/>
      </mal:enumeration>

      <mal:enumeration name="SubPlanStatusEnum" shortFormPart="512" comment="E1: This enumeration may be used to indicate whether or not a given subplan is active.">
        <mal:item nvalue="1" value="ACTIVATED" comment="The sub-plan is active."/>
        <mal:item nvalue="2" value="DEACTIVATED" comment="The sub-plan is not active."/>
      </mal:enumeration>

      <mal:enumeration name="ArgTypeEnum" shortFormPart="1" comment="E1: ArgTypeEnum is an MPS extension of the MAL::AttributeType enumeration (see reference [2] section 4.6.4) that also allows specification of the data types Position or Direction.">
        <mal:item nvalue="1" value="BLOB" comment="Binary object."/>
        <mal:item nvalue="2" value="BOOLEAN" comment="Boolean value (True or False)."/>
        <mal:item nvalue="3" value="DURATION" comment="Length of time in nanosecond resolution."/>
        <mal:item nvalue="4" value="FLOAT" comment="Floating point number (32 bits)."/>
        <mal:item nvalue="5" value="DOUBLE" comment="Double precision floating point number (64 bits)."/>
        <mal:item nvalue="6" value="IDENTIFIER" comment="The Identifier structure is used to store an identifier and can be used for indexing.  It is a variable-length, unbounded, Unicode string."/>
        <mal:item nvalue="7" value="OCTET" comment="Signed 8 bit Integer."/>
        <mal:item nvalue="8" value="UOCTET" comment="Unsigned 8 bit Integer."/>
        <mal:item nvalue="9" value="SHORT" comment="Signed 16 bit Integer."/>
        <mal:item nvalue="10" value="USHORT" comment="Unsigned 16 bit Integer."/>
        <mal:item nvalue="11" value="INTEGER" comment="Signed 32 bit Integer."/>
        <mal:item nvalue="12" value="UINTEGER" comment="Unsigned 32 bit Integer."/>
        <mal:item nvalue="13" value="LONG" comment="Signed 64 bit Integer."/>
        <mal:item nvalue="14" value="ULONG" comment="Unsigned 64 bit Integer."/>
        <mal:item nvalue="15" value="STRING" comment="Text.  It is a variable length, unbounded, Unicode string."/>
        <mal:item nvalue="16" value="TIME" comment="Absolute date-time to millisecond resolution."/>
        <mal:item nvalue="17" value="FINETIME" comment="Absolute date-time to nanosecond resolution."/>
        <mal:item nvalue="18" value="URI" comment="Uniform Resource Identifier (address).  It is a variable-length, unbounded Unicode string (see reference [4])."/>
        <mal:item nvalue="19" value="OBJECTREF" comment="Object Reference."/>
        <mal:item nvalue="129" value="POSITION" comment="MPS Position."/>
        <mal:item nvalue="130" value="DIRECTION" comment="MPS Direction."/>
        <mal:item nvalue="131" value="ANGLE" comment="MPS Angle."/>
        <mal:item nvalue="132" value="ANGULAR_RATE" comment="MPS AngularRate."/>
        <mal:item nvalue="133" value="DISTANCE" comment="MPS Distance."/>
        <mal:item nvalue="134" value="ANY" comment="Argument may be of any type.  It will map to a MAL::Element.  It can be used to specify an argument list of heterogeneous types."/>
      </mal:enumeration>

      <mal:enumeration name="LogicOpEnum" shortFormPart="30" comment="E1: A LogicOpEnum represents the type of logic used to combine two Boolean conditions.">
        <mal:item nvalue="1" value="AND" comment="Logical AND"/>
        <mal:item nvalue="2" value="OR" comment="Logical OR"/>
      </mal:enumeration>

      <mal:enumeration name="ExpressionOperatorEnum" shortFormPart="36" comment="E5: Whenever a value comparison is needed in this standard, multiple Boolean operations may be chosen from. These operations are described by each of the possible enumeration values of ExpressionOperatorEnum.">
        <mal:item nvalue="1" value="EQUAL" comment="="/>
        <mal:item nvalue="2" value="DIFFER" comment="!="/>
        <mal:item nvalue="3" value="GREATER" comment="&gt;"/>
        <mal:item nvalue="4" value="GREATER_OR_EQUAL" comment="&gt;="/>
        <mal:item nvalue="5" value="LESS" comment="&lt;"/>
        <mal:item nvalue="6" value="LESS_OR_EQUAL" comment="&lt;="/>
        <mal:item nvalue="7" value="CONTAINS" comment="Case sensitive containment (Strings only)."/>
        <mal:item nvalue="8" value="ICONTAINS" comment="Case insensitive containment (Strings only)."/>
      </mal:enumeration>

      <mal:enumeration name="EffectOperationEnum" shortFormPart="49" comment="E5: An EffectOperationEnum is used to denote the specific type of change made to a planning resource for a given Effect.">
        <mal:item nvalue="1" value="SET" comment="Set to specified value"/>
        <mal:item nvalue="2" value="INCREASE" comment="Increase by specified value"/>
        <mal:item nvalue="3" value="DECREASE" comment="Decrease by specified value"/>
      </mal:enumeration>

      <mal:enumeration name="SeparationTypeEnum" shortFormPart="56" comment="E1: A SeparationTypeEnum is used to define whether the separation between repetitions is relative or absolute.">
        <mal:item nvalue="1" value="RELATIVE" comment="Tolerance on separation is only considered between any two occurrences."/>
        <mal:item nvalue="2" value="ABSOLUTE" comment="Tolerance on separation applies to a multiple of the separation from the initial occurrence."/>
      </mal:enumeration>

      <mal:enumeration name="SecondaryErrorCodeEnum" shortFormPart="64" comment="E1: For the INVALID error, the secondary error code is a MAL::UShort that allows for deployment specific extensibility.">
        <mal:item nvalue="1" value="UNKNOWN" comment="Referenced MO object is not available to the service provider."/>
        <mal:item nvalue="2" value="UNDEFINED" comment="Undefined value for enumeration field."/>
        <mal:item nvalue="3" value="OUT_OF_RANGE" comment="A numeric value is outside the supported range."/>
        <mal:item nvalue="4" value="UNRECOGNIZED" comment="Value of type MAL::Identifier or MAL::String (referencing a named item) does not correspond to a known item."/>
        <mal:item nvalue="5" value="BAD_TIME" comment="A date-time value is outside the supported time period."/>
        <mal:item nvalue="6" value="BAD_POSITION" comment="A position value is outside the supported position range."/>
        <mal:item nvalue="7" value="BAD_DIRECTION" comment="A direction value is outside the supported direction range."/>
        <mal:item nvalue="8" value="INCONSISTENT" comment="A value is inconsistent with that of another field within the message.  This indicates violation of a constraint rule."/>
      </mal:enumeration>

    </mal:dataTypes>

    <mal:errors>
        <mal:error number="1" name="INVALID" comment="One or more fields in the message contain invalid values."/>
        <mal:error number="2" name="CANCEL_FAILED" comment="The cancelRequest operation failed to cancel the referenced RequestInstance."/>
        <mal:error number="3" name="UPDATE_FAILED" comment="The update operation (to Request, PlanStatus, Activity, Event or Resource) failed to update the referenced object."/>
        <mal:error number="4" name="REVOKE_FAILED" comment="The revokePlan operation failed to revoke the referenced Plan, for example because it has already started executing."/>
        <mal:error number="5" name="INSERT_FAILED" comment="The insertActivity or insertEvent operation failed to insert the requested object."/>
        <mal:error number="6" name="DELETE_FAILED" comment="The deleteActivity or deleteEvent operation failed to delete the requested object."/>
        <mal:error number="7" name="ACTIVATE_FAILED" comment="The activatePlan operation failed as the activation was outside the validity period of the Plan, or the start of the planPeriod had already passed.  "/>
        <mal:error number="8" name="DEACTIVATE_FAILED" comment="The deactivatePlan operation failed."/>
        <mal:error number="9" name="SUBMIT_FAILED" comment="The submitPlan operation failed as the submitted plan was already terminated."/>
        <mal:error number="10" name="UNSUPPORTED" comment="An optional data structure used in the message is not supported by the service provider."/>
        <mal:error number="11" name="ACTIVATE_SUBPLAN_FAILED" comment="The activateSubPlan operation failed."/>
        <mal:error number="12" name="DEACTIVATE_SUBPLAN_FAILED" comment="The deactivateSubPlan operation failed."/>
    </mal:errors>

  </mal:area>
</mal:specification>

